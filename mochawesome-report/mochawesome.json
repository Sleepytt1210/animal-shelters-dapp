{
  "stats": {
    "suites": 11,
    "tests": 100,
    "passes": 89,
    "pending": 11,
    "failures": 0,
    "start": "2022-04-28T13:51:19.932Z",
    "end": "2022-04-28T13:51:29.376Z",
    "duration": 9444,
    "testsRegistered": 100,
    "passPercent": 100,
    "pendingPercent": 11,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7d2128d7-7651-4515-9642-4414db662268",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "480e2e34-6708-4295-b47b-b3ba9cddb6f5",
          "title": "Contract: Adoption Contract Unit and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
          "file": "\\test\\contracts\\Adoption.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 268,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "fe5442ae-c9a9-44ec-bf3f-ccaa1dea3093",
              "parentUUID": "480e2e34-6708-4295-b47b-b3ba9cddb6f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before all\" hook in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 106,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();\nadoption = await Adoption.deployed();\nadoptionFee = await adoption.getAdoptionFee();",
              "err": {},
              "uuid": "5a741325-85b2-4f99-b539-7e0aaaa836ea",
              "parentUUID": "480e2e34-6708-4295-b47b-b3ba9cddb6f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before each\" hook: before test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "2623d1c3-74b7-4329-9202-903defcd9558",
              "parentUUID": "480e2e34-6708-4295-b47b-b3ba9cddb6f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"after each\" hook: after test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "a27d972c-25d6-4074-9c21-72d61b52092c",
              "parentUUID": "480e2e34-6708-4295-b47b-b3ba9cddb6f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "dcaeed25-1e62-48aa-8d55-21c568733b02",
              "title": "Testing normal add pet operation",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully add pets to the blockchain",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal add pet operation should successfully add pets to the blockchain",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const startingPetCount = await adoption.totalSupply();\nassert.isTrue(startingPetCount.eqn(0), \"Starting pet count should be 0\");\nconst expectedPetCount = 2;\nconst result1 = await adoption.addPet(fakeURI, adoptionStates[0], {\n  from: account1,\n});\nconst result2 = await adoption.addPet(fakeURI, adoptionStates[0], {\n  from: account1,\n});\nconst actualPetCount = await adoption.totalSupply();\ntruffleAssert.eventEmitted(result1, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(0) &&\n    ev.status.eqn(adoptionStateToNum[\"ADDED\"])\n  );\n});\ntruffleAssert.eventEmitted(result2, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(1) &&\n    ev.status.eqn(adoptionStateToNum[\"ADDED\"])\n  );\n});\nassert.isTrue(\n  actualPetCount.eqn(expectedPetCount),\n  \"Actual pet count is incorrect after pets are added\"\n);",
                  "err": {},
                  "uuid": "76f640cf-afa3-4159-97ea-eb2592b8bcfa",
                  "parentUUID": "dcaeed25-1e62-48aa-8d55-21c568733b02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76f640cf-afa3-4159-97ea-eb2592b8bcfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "3a18e8bc-2732-47c0-b161-847869cb8499",
              "title": "Testing normal adoption operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Testing normal adoption operations\"",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations \"before all\" hook in \"Testing normal adoption operations\"",
                  "timedOut": false,
                  "duration": 769,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const smartContractPetCount = await adoption.totalSupply();\n// Initiliase pets.\nfor (let i = smartContractPetCount.toNumber(); i < petCount; i++) {\n  const result = await adoption.addPet(fakeURI, adoptionStates[i], {\n    from: account1,\n  });\n  addPetResults.push(result);\n}\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
                  "err": {},
                  "uuid": "81fafc89-d2a8-4427-9129-bf40ae49a9e8",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully request for adoption of an adoptable pet",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should successfully request for adoption of an adoptable pet",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nexpectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nexpectedAdopter = account2;\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nconst result = await adoption.requestAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst depositPaid = await adoption.getAdopterDeposit(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"LOCKED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption state is equal\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Temporary adopter is equal\"\n);\nassert.isTrue(\n  depositPaid.eq(adoptionFee),\n  \"Deposit paid should be equal to adoption fee\"\n);",
                  "err": {},
                  "uuid": "af773aff-2e60-4640-bc60-4ff3bad05658",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully approve a pet in LOCKED adoption status with correct arguments",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should successfully approve a pet in LOCKED adoption status with correct arguments",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nexpectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be LOCKED\"\n);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nconst expectedApproval = account2;\nconst result = await adoption.approveAdoption(account2, petID, {\n  from: account1,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"APPROVED\"])\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Account 2 should be approved for adoption\"\n);",
                  "err": {},
                  "uuid": "3dd90fb7-b95d-4f8d-b363-7c7202dadf61",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nconst tipAmount = SNOWdenomination(1000);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nconst account1StartingSNOWBalance = await snow.balanceOf(account1);\nconst account2StartingSNOWBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTED\"];\nconst expectedDeposit = 0;\nconst expectedApproval = emptyAddress;\nconst expectedAccount1Balance =\n  account1StartingSNOWBalance.add(tipAmount);\nconst expectedAccount2Balance = account2StartingSNOWBalance\n  .sub(tipAmount)\n  .add(adoptionFee);\nawait snow.approve(adoption.address, tipAmount, { from: account2 });\nconst result = await adoption.confirmAdoption(petID, tipAmount, {\n  from: account2,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\nconst actualDepositFee = await adoption.getAdopterDeposit(account2);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"ADOPTED\"])\n  );\n});\ntruffleAssert.eventEmitted(result, \"TipsReceived\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.owner == account1 &&\n    ev.amount.eq(tipAmount)\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be ADOPTED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Approval of pet should be an empty address\"\n);\nassert.isTrue(\n  actualDepositFee.eqn(expectedDeposit),\n  \"Deposit should be fully cleared\"\n);\nassert.isTrue(\n  actualAccount1FinalBalance.eq(expectedAccount1Balance),\n  \"Final balance of account 1 should be increased by tip amount\"\n);\nassert.isTrue(\n  actualAccount2FinalBalance.eq(expectedAccount2Balance),\n  \"Final balance of account 2 should be increased by adoption fee and decreased by tip amount\"\n);",
                  "err": {},
                  "uuid": "eb13379b-6081-4db8-96ab-34b8a12b7998",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a requested adoption successfully and refund correct amount of penalty",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should reject a requested adoption successfully and refund correct amount of penalty",
                  "timedOut": false,
                  "duration": 337,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 3;\nconst penalty = adoptionFee.divn(2);\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(penalty);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.rejectAdoption(account2, petID, {\n  from: account1,\n});\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"REJECTED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after rejection is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after rejection is incorrect\"\n);",
                  "err": {},
                  "uuid": "316f21b2-6320-488c-95aa-1ef819f198c4",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cancel an approved adoption successfully and refund correct amount of penalty",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should cancel an approved adoption successfully and refund correct amount of penalty",
                  "timedOut": false,
                  "duration": 349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 4;\nconst penalty = await adoption.getPenaltyRefundFee();\nconst donation = adoptionFee.sub(penalty);\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });\nawait adoption.approveAdoption(account2, petID, { from: account1 });\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(donation);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.cancelAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"CANCELLED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after cancellation is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after cancellation is incorrect\"\n);",
                  "err": {},
                  "uuid": "8aabbf99-c543-4ba1-ada5-dac4d17f2827",
                  "parentUUID": "3a18e8bc-2732-47c0-b161-847869cb8499",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af773aff-2e60-4640-bc60-4ff3bad05658",
                "3dd90fb7-b95d-4f8d-b363-7c7202dadf61",
                "eb13379b-6081-4db8-96ab-34b8a12b7998",
                "316f21b2-6320-488c-95aa-1ef819f198c4",
                "8aabbf99-c543-4ba1-ada5-dac4d17f2827"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1228,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
              "title": "Test reverts for add pet method",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on adding pet with invalid new status LOCKED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status LOCKED",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "5179fa78-9260-4ecf-b148-20a55a7c12f4",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status APPROVED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status APPROVED",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "f3b9951c-c48e-40d4-8c78-7c6bcf200944",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADOPTED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status ADOPTED",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "5488bc34-d0cd-4dbd-ab6c-16ef1cad4e6b",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REJECTED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status REJECTED",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "dc3de387-954e-4f1e-a5ac-5f960dd191ac",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status CANCELLED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status CANCELLED",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "398b6e03-7e73-421e-a3b2-8890ef156876",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADDED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status ADDED",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "270dbb8a-03ad-4678-96f8-b570ff8dacab",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REMOVED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status REMOVED",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "8a0687b9-d12c-4445-b7a1-088eac66ca29",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status EUTHANISED",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for add pet method should revert on adding pet with invalid new status EUTHANISED",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "ee3e0269-63f5-420a-b2d2-3da0995f8e37",
                  "parentUUID": "b627b5c6-e5af-4e36-8cee-0f77abd21759",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5179fa78-9260-4ecf-b148-20a55a7c12f4",
                "f3b9951c-c48e-40d4-8c78-7c6bcf200944",
                "5488bc34-d0cd-4dbd-ab6c-16ef1cad4e6b",
                "dc3de387-954e-4f1e-a5ac-5f960dd191ac",
                "398b6e03-7e73-421e-a3b2-8890ef156876",
                "270dbb8a-03ad-4678-96f8-b570ff8dacab",
                "8a0687b9-d12c-4445-b7a1-088eac66ca29",
                "ee3e0269-63f5-420a-b2d2-3da0995f8e37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 516,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
              "title": "Test reverts for request method",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for request method\"",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method \"before all\" hook in \"Test reverts for request method\"",
                  "timedOut": false,
                  "duration": 40,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await snow.approve(adoption.address, adoptionFee * 2, { from: account2 });",
                  "err": {},
                  "uuid": "ba924318-e1cd-41dc-9335-ec7fd6a2bcdf",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on requesting nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert on requesting nonexistent pet ID",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.requestAdoption(petCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "de0d6c42-35c2-4fad-b644-d52199386493",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "1b91cfab-62de-40a1-bc85-cfd40a4efbbb",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "b7db5d70-3e30-4f83-bf77-e7cb9b516c65",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "38c3628e-3147-40d0-9591-3cee891156ff",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 9,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "b2f9849b-014e-46ec-be80-1e65dd893354",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 7,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e74056bb-aa47-4065-9a05-00afa4fa7221",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 9,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "f817c2f9-0708-42dc-bd2a-ca8a95ce364d",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 12,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "36443e22-21c9-4d04-b836-8a9fe65ea680",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 11,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "99b5f514-9d72-4c09-a008-081dc4771b3c",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 7,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "6fdf413d-4d8e-497d-a152-9ba59a4cc2f9",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "a5a2d51b-2215-4048-a385-091fd8302820",
                  "parentUUID": "b7cdad88-e6a7-450a-9cd1-4b068e7e3674",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de0d6c42-35c2-4fad-b644-d52199386493",
                "1b91cfab-62de-40a1-bc85-cfd40a4efbbb",
                "b7db5d70-3e30-4f83-bf77-e7cb9b516c65",
                "38c3628e-3147-40d0-9591-3cee891156ff"
              ],
              "failures": [],
              "pending": [
                "b2f9849b-014e-46ec-be80-1e65dd893354",
                "e74056bb-aa47-4065-9a05-00afa4fa7221",
                "f817c2f9-0708-42dc-bd2a-ca8a95ce364d",
                "36443e22-21c9-4d04-b836-8a9fe65ea680",
                "99b5f514-9d72-4c09-a008-081dc4771b3c",
                "6fdf413d-4d8e-497d-a152-9ba59a4cc2f9",
                "a5a2d51b-2215-4048-a385-091fd8302820"
              ],
              "skipped": [],
              "duration": 312,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
              "title": "Test reverts for approve and reject methods",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for approve and reject methods\"",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods \"before all\" hook in \"Test reverts for approve and reject methods\"",
                  "timedOut": false,
                  "duration": 76,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await adoption.requestAdoption(lockedPet, { from: account2 });",
                  "err": {},
                  "uuid": "a5299104-9c24-456e-9029-77088cd19c8a",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on approving nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert on approving nonexistent pet ID",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account2, petCount, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "9879596c-ee0e-41c9-8365-2dea88b4569e",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on rejecting nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert on rejecting nonexistent pet ID",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account2, petCount, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "bfe9c7f0-3a5d-4d98-b9c6-3b3ea8f29f9f",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "58530222-4ecc-485f-aac6-2220ab823c25",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0b1cadf6-6b95-4761-bde6-9b3193f98b76",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "5cdc3bf2-f264-4797-a10a-4348f7fc2f6c",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "2c7272be-9b9e-41fe-ab2f-2837bd61762b",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "cb50c882-178c-4096-8024-0fefbb3a1e20",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "ba9ac757-c565-4882-a8ab-700c17eb9d39",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e5c8ad2c-de0a-45f5-a404-5bdf16d9e673",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "6b095730-68fc-454c-8163-c239fee84a4c",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "82052c06-5dd8-4ac7-a2d8-84314aba3b62",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "37fba125-a0ec-4d01-bb3a-bfacd91d35c1",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 7,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "2c836579-1572-4f1d-a106-018423d6206b",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 6,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "46e15acf-a893-4ed9-b79e-3a6032787df7",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "8c9c2225-31ee-48a0-9b64-adc0abe39372",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "d3950a09-4ad2-44e8-9975-02b5aefa0f74",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "123d33cc-e65c-4987-86bf-8c6ad75d9296",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0e585529-9113-4554-8455-3d07ad3e22ac",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "499df0f8-8cda-4fb9-8fcc-c4878132ce39",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "c56dba99-6a8d-4370-9ca2-610ab43754b2",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "ba59729d-ba4f-4879-bdb4-43fdc33772bf",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0e31b64c-a25e-4e0f-9c50-db3c86ec6d36",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on approving unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert on approving unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "3cfb5d28-6676-4682-8b4a-28b7fcb29f10",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on rejecting unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for approve and reject methods should revert on rejecting unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "491ffc64-30a2-44d5-9381-548016e38a4f",
                  "parentUUID": "e6c546fd-d2f1-4c70-a2db-5e2d134087be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9879596c-ee0e-41c9-8365-2dea88b4569e",
                "bfe9c7f0-3a5d-4d98-b9c6-3b3ea8f29f9f",
                "58530222-4ecc-485f-aac6-2220ab823c25",
                "0b1cadf6-6b95-4761-bde6-9b3193f98b76",
                "5cdc3bf2-f264-4797-a10a-4348f7fc2f6c",
                "2c7272be-9b9e-41fe-ab2f-2837bd61762b",
                "cb50c882-178c-4096-8024-0fefbb3a1e20",
                "ba9ac757-c565-4882-a8ab-700c17eb9d39",
                "e5c8ad2c-de0a-45f5-a404-5bdf16d9e673",
                "6b095730-68fc-454c-8163-c239fee84a4c",
                "82052c06-5dd8-4ac7-a2d8-84314aba3b62",
                "37fba125-a0ec-4d01-bb3a-bfacd91d35c1",
                "8c9c2225-31ee-48a0-9b64-adc0abe39372",
                "d3950a09-4ad2-44e8-9975-02b5aefa0f74",
                "123d33cc-e65c-4987-86bf-8c6ad75d9296",
                "0e585529-9113-4554-8455-3d07ad3e22ac",
                "499df0f8-8cda-4fb9-8fcc-c4878132ce39",
                "c56dba99-6a8d-4370-9ca2-610ab43754b2",
                "ba59729d-ba4f-4879-bdb4-43fdc33772bf",
                "0e31b64c-a25e-4e0f-9c50-db3c86ec6d36",
                "3cfb5d28-6676-4682-8b4a-28b7fcb29f10",
                "491ffc64-30a2-44d5-9381-548016e38a4f"
              ],
              "failures": [],
              "pending": [
                "2c836579-1572-4f1d-a106-018423d6206b",
                "46e15acf-a893-4ed9-b79e-3a6032787df7"
              ],
              "skipped": [],
              "duration": 1560,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
              "title": "Test reverts for confirm and cancel methods",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for confirm and cancel methods\"",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods \"before all\" hook in \"Test reverts for confirm and cancel methods\"",
                  "timedOut": false,
                  "duration": 133,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await adoption.requestAdoption(approvedPet, { from: account2 });\nawait adoption.approveAdoption(account2, approvedPet, { from: account1 });",
                  "err": {},
                  "uuid": "38e60d9c-dde7-4492-aa08-ff9c7ae0d02b",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on confirming nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming nonexistent pet ID",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(petCount, 0, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "73165b0b-4ea1-4827-97d9-64a99607cf60",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling nonexistent pet ID",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(petCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "e3d57b5c-ed9d-4cde-9e35-66da89600d7c",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "ff3e2724-242b-4e08-a7e9-1e5806ac861b",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "32cac643-fef8-43d8-a028-31132d41c3d5",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "1a776422-ef14-4f7c-983b-88f215e42645",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "7ba2656b-868f-4e76-8cf1-ece2e59dc09a",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "2d4fe6c7-3a18-46bd-aecd-67329eb89f3c",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "96148ce0-a830-415c-b201-6d10de895fe0",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "09fc3875-ea6d-4752-bc09-bfe28a34808a",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "810b9aab-b85e-47ae-88f1-a414e7ca8775",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "73ac7bd5-a5a3-4c98-97fb-2370d49bc0e4",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "f6f083c5-13fe-411a-ab35-4475763f2907",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "bc9659dc-e2e7-454b-8af2-3c993e6074b8",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "3cda9374-5f7e-4805-9c55-7a7dcb7fdcab",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "6960e8c1-03ab-4926-872a-7abb85dd54ce",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "eddd3d50-18d7-4e3d-bebd-834707377fb0",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "87c7fc97-f009-4961-aa9b-f3434b39c9cf",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "6da17c4f-e8d9-4771-801f-cf58a754e9d0",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "07fa142c-9979-4efa-932b-1cb2c31798ed",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "d1984aa7-6923-406f-ba9c-f814517c8db3",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "010295d7-9a6b-49f7-8691-231e67747ae2",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "4725e486-74e0-49ef-8e56-9e0acb1503c4",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "c3901c10-6f3e-4388-b24b-c1779dce5be2",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "9257a5bb-b8bc-48a7-aed2-3a912480435e",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "12fd90fd-03d0-4009-a33d-21ed311e584b",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "daa9a115-290b-48be-ac25-ebde46ee5a89",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 7,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "2a8c55ac-5495-4586-a2ca-195087bbc2d2",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 5,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "acb9d3e5-a1b7-436b-88e2-27b9418dbac0",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "b3368a8c-a8ac-4a58-acc8-8f10d6d717fe",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "a7eb7dde-ea58-46de-ae37-6062a76277e9",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "263e7a5a-281e-40d8-83cf-3633c3948371",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e0ccfd26-7263-4383-9566-5d01990eaf82",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "41a6be6b-97b4-42d0-b63b-2c5d4717e82d",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "645b8ae4-b5e4-448b-993d-af74bd875cdc",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "a766c7d5-b30a-48cd-9b81-c77c080833b4",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e07bbc11-c415-41bc-a4b2-f6600f681822",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "c6454075-7333-4834-86c6-804d413d4745",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "78cc03ed-c77c-4ca5-aa0f-eba934169355",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "5f090a84-2618-433f-a434-3b67d98c2245",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e28f2ccf-a6d1-48cf-8ef7-f863518353a8",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "e86bcecf-a655-450e-8ccb-74fd7b1ba371",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "d9ed3fe1-df63-4060-acd9-6b0e7df37931",
                  "parentUUID": "bece4e41-22c1-4ce0-8475-c172d5e7469b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73165b0b-4ea1-4827-97d9-64a99607cf60",
                "e3d57b5c-ed9d-4cde-9e35-66da89600d7c",
                "ff3e2724-242b-4e08-a7e9-1e5806ac861b",
                "32cac643-fef8-43d8-a028-31132d41c3d5",
                "1a776422-ef14-4f7c-983b-88f215e42645",
                "7ba2656b-868f-4e76-8cf1-ece2e59dc09a",
                "2d4fe6c7-3a18-46bd-aecd-67329eb89f3c",
                "96148ce0-a830-415c-b201-6d10de895fe0",
                "09fc3875-ea6d-4752-bc09-bfe28a34808a",
                "810b9aab-b85e-47ae-88f1-a414e7ca8775",
                "73ac7bd5-a5a3-4c98-97fb-2370d49bc0e4",
                "f6f083c5-13fe-411a-ab35-4475763f2907",
                "bc9659dc-e2e7-454b-8af2-3c993e6074b8",
                "3cda9374-5f7e-4805-9c55-7a7dcb7fdcab",
                "6960e8c1-03ab-4926-872a-7abb85dd54ce",
                "eddd3d50-18d7-4e3d-bebd-834707377fb0",
                "87c7fc97-f009-4961-aa9b-f3434b39c9cf",
                "6da17c4f-e8d9-4771-801f-cf58a754e9d0",
                "07fa142c-9979-4efa-932b-1cb2c31798ed",
                "d1984aa7-6923-406f-ba9c-f814517c8db3",
                "010295d7-9a6b-49f7-8691-231e67747ae2",
                "4725e486-74e0-49ef-8e56-9e0acb1503c4",
                "c3901c10-6f3e-4388-b24b-c1779dce5be2",
                "9257a5bb-b8bc-48a7-aed2-3a912480435e",
                "12fd90fd-03d0-4009-a33d-21ed311e584b",
                "daa9a115-290b-48be-ac25-ebde46ee5a89",
                "b3368a8c-a8ac-4a58-acc8-8f10d6d717fe",
                "a7eb7dde-ea58-46de-ae37-6062a76277e9",
                "263e7a5a-281e-40d8-83cf-3633c3948371",
                "e0ccfd26-7263-4383-9566-5d01990eaf82",
                "41a6be6b-97b4-42d0-b63b-2c5d4717e82d",
                "645b8ae4-b5e4-448b-993d-af74bd875cdc",
                "a766c7d5-b30a-48cd-9b81-c77c080833b4",
                "e07bbc11-c415-41bc-a4b2-f6600f681822",
                "c6454075-7333-4834-86c6-804d413d4745",
                "78cc03ed-c77c-4ca5-aa0f-eba934169355",
                "5f090a84-2618-433f-a434-3b67d98c2245",
                "e28f2ccf-a6d1-48cf-8ef7-f863518353a8",
                "e86bcecf-a655-450e-8ccb-74fd7b1ba371",
                "d9ed3fe1-df63-4060-acd9-6b0e7df37931"
              ],
              "failures": [],
              "pending": [
                "2a8c55ac-5495-4586-a2ca-195087bbc2d2",
                "acb9d3e5-a1b7-436b-88e2-27b9418dbac0"
              ],
              "skipped": [],
              "duration": 2686,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
          "title": "Contract: Donation Contract Unit Test and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
          "file": "\\test\\contracts\\Donation.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 135,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "4a3aad3c-fe83-46d0-89c9-eab95f2fc698",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before all\" hook in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 129,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();\ndonation = await Donation.deployed();\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "b0ba804c-9281-41f0-8b84-85893c28ab7b",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before each\" hook: before test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "d0626627-5211-49c7-951c-2a580a997f7a",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"after each\" hook: after test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "04692100-1d15-473b-bc7d-9d49158dcd30",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should revert on 0 amount donation",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test should revert on 0 amount donation",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = \"Good luck\";\nawait truffleAssert.fails(\n  donation.donateETH(message, { from: account2, value: \"0\" }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"ETH donation incorrectly passed with amount 0\"\n);\nawait truffleAssert.fails(\n  donation.donateSNOW(\"0\", message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"SNOW donation incorrectly passed with amount 0\"\n);",
              "err": {},
              "uuid": "ca41d764-f9d9-4c1a-a137-95d8a7b04045",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should revert on insufficient allowance",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test should revert on insufficient allowance",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = \"Good luck\";\nconst donateAmount = SNOWdenomination(50000);\nawait snow.approve(donation.address, donateAmount.subn(1));\nawait truffleAssert.fails(\n  donation.donateSNOW(donateAmount, message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"insufficient allowance\",\n  \"SNOW donation incorrectly passed with insufficient allowance\"\n);",
              "err": {},
              "uuid": "21daba77-128d-4184-b7bf-52bb5097a05a",
              "parentUUID": "4604d5ea-dfcf-4e92-81db-5103756bc7b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7a6d2ed0-79c3-4014-b252-6f63b30bd40d",
              "title": "Testing normal donation operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
              "file": "\\test\\contracts\\Donation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should donate correct amount of SNOW with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Testing normal donation operations should donate correct amount of SNOW with correct message to the owner",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst expectedTokenType = tokenTypeToNum[\"SNOW\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = SNOWdenomination(50000);\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nawait snow.approve(donation.address, donateAmount, { from: account2 });\nconst result = await donation.donateSNOW(donateAmount, donateMessage, {\n  from: account2,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "4ef3ad1c-a87f-40b2-94cf-e6d015ff057b",
                  "parentUUID": "7a6d2ed0-79c3-4014-b252-6f63b30bd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should donate correct amount of ETH with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Testing normal donation operations should donate correct amount of ETH with correct message to the owner",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = BN(await web3.eth.getBalance(account1));\nconst account2StartingBalance = BN(await web3.eth.getBalance(account2));\nconst expectedTokenType = tokenTypeToNum[\"ETH\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = BN(Web3.utils.toWei(\"0.05\", \"ether\"));\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nvar expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nconst result = await donation.donateETH(donateMessage, {\n  from: account2,\n  value: donateAmount,\n});\nconst actualAccount1FinalBalance = BN(\n  await web3.eth.getBalance(account1)\n);\nconst actualAccount2FinalBalance = BN(\n  await web3.eth.getBalance(account2)\n);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst gasPrice = BN(result.receipt.effectiveGasPrice);\nconst gasUsed = BN(result.receipt.gasUsed);\nconst gasCost = gasPrice.mul(gasUsed);\nexpectedAccount2FinalBalance.isub(gasCost);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "1506131f-f999-471f-87ae-138ad97c7575",
                  "parentUUID": "7a6d2ed0-79c3-4014-b252-6f63b30bd40d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ef3ad1c-a87f-40b2-94cf-e6d015ff057b",
                "1506131f-f999-471f-87ae-138ad97c7575"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [
            "ca41d764-f9d9-4c1a-a137-95d8a7b04045",
            "21daba77-128d-4184-b7bf-52bb5097a05a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b6d8ee14-729d-440e-862d-4957df38b8c4",
          "title": "Contract: ShelterNOW Contract Unit Test and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
          "file": "\\test\\contracts\\ShelterNOW.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 118,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "38b24f9a-08f5-4084-a0b2-3467bd179091",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before all\" hook in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();",
              "err": {},
              "uuid": "baa706c4-bd1c-4b44-bc32-21aa64547cec",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "05c5cf0a-c15f-49ec-83a0-67bda94bca61",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "2fe1b81b-9709-4351-9626-d7e5e5251700",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should revert on insufficient balance",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test should revert on insufficient balance",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account2Balance = await snow.balanceOf(account2);\ntruffleAssert.fails(\n  snow.transfer(account1, account2Balance.addn(1), { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"transfer amount exceeds balance\",\n  \"ShelterNOW transfer incorrectly passes with insufficient balance\"\n);",
              "err": {},
              "uuid": "eb52a041-71ea-4997-80a5-7d9337d84ee6",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should revert on insufficient allowance",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test should revert on insufficient allowance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const transferAmount = \"15000000000000\";\ntruffleAssert.fails(\n  snow.transferFrom(account1, account2, transferAmount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"insufficient allowance\",\n  \"ShelterNOW transfer incorrectly passes with insufficient allowance\"\n);",
              "err": {},
              "uuid": "95ce0888-4566-40b0-8bca-ecbeb7e03733",
              "parentUUID": "b6d8ee14-729d-440e-862d-4957df38b8c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3f480a0c-b2c1-4e69-a003-018f36f3d576",
              "title": "Testing normal ShelterNOW operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
              "file": "\\test\\contracts\\ShelterNOW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer token and receive token correctly",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should transfer token and receive token correctly",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst transferAmount = SNOWdenomination(100);\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.sub(transferAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.add(transferAmount);\nconst result = await snow.transfer(account2, transferAmount, {\n  from: account1,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"Transfer\", (ev) => {\n  return (\n    ev.from == account1 &&\n    ev.to == account2 &&\n    ev.value.eq(transferAmount)\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Balance of account 1 is incorrect after transfer\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Balance of account 2 is incorrect after transfer\"\n);",
                  "err": {},
                  "uuid": "0d8c9ad8-1917-4dc7-8dff-b58af52fa4e0",
                  "parentUUID": "3f480a0c-b2c1-4e69-a003-018f36f3d576",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly approve spending allowance to another account",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should correctly approve spending allowance to another account",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const owner = account1;\nconst spender = account2;\nconst startingAllowance = await snow.allowance(owner, spender);\nconst givenAllowance = SNOWdenomination(200);\nconst expectedAllowance = SNOWdenomination(200);\nconst result = await snow.approve(spender, givenAllowance, {\n  from: owner,\n});\nconst actualAllowance = await snow.allowance(owner, spender);\ntruffleAssert.eventEmitted(result, \"Approval\", (ev) => {\n  return (\n    ev.owner == owner &&\n    ev.spender == spender &&\n    ev.value.eq(expectedAllowance)\n  );\n});\nassert.isTrue(\n  startingAllowance.eqn(0),\n  \"Starting allowance should be equal to 0\"\n);\nassert.isTrue(\n  expectedAllowance.eq(actualAllowance),\n  \"Expected allowance is not equal to the actual allowance\"\n);",
                  "err": {},
                  "uuid": "c335c926-32e7-4d5c-831f-cbf08585d761",
                  "parentUUID": "3f480a0c-b2c1-4e69-a003-018f36f3d576",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should transfer token and receive token correctly by approved spender",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should transfer token and receive token correctly by approved spender",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const owner = account1;\nconst spender = account2;\nconst account1StartingBalance = await snow.balanceOf(owner);\nconst account2StartingBalance = await snow.balanceOf(spender);\nconst transferAmount = SNOWdenomination(200);\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.sub(transferAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.add(transferAmount);\nawait snow.approve(spender, transferAmount, { from: owner });\nconst approvedAllowance = await snow.allowance(owner, spender);\nconst expectedFinalAllowance = approvedAllowance.sub(transferAmount);\nconst result = await snow.transferFrom(owner, spender, transferAmount, {\n  from: spender,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(owner);\nconst actualAccount2FinalBalance = await snow.balanceOf(spender);\nconst actualFinalAllowance = await snow.allowance(owner, spender);\ntruffleAssert.eventEmitted(result, \"Transfer\", (ev) => {\n  return (\n    ev.from == account1 &&\n    ev.to == account2 &&\n    ev.value.eq(transferAmount)\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Balance of account 1 is incorrect after transfer\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Balance of account 2 is incorrect after transfer\"\n);\nassert.isTrue(\n  approvedAllowance.eq(transferAmount),\n  \"Allowance is not increased after approval\"\n);\nassert.isTrue(\n  actualFinalAllowance.eq(expectedFinalAllowance),\n  \"Final allowance is not spent by the transfer amount\"\n);",
                  "err": {},
                  "uuid": "8446a865-2f37-429c-a977-dbeab8366e59",
                  "parentUUID": "3f480a0c-b2c1-4e69-a003-018f36f3d576",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d8c9ad8-1917-4dc7-8dff-b58af52fa4e0",
                "c335c926-32e7-4d5c-831f-cbf08585d761",
                "8446a865-2f37-429c-a977-dbeab8366e59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 247,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [
            "eb52a041-71ea-4997-80a5-7d9337d84ee6",
            "95ce0888-4566-40b0-8bca-ecbeb7e03733"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": false,
      "version": "6.2.0"
    }
  }
}