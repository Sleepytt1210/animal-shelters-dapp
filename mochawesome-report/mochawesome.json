{
  "stats": {
    "suites": 10,
    "tests": 97,
    "passes": 86,
    "pending": 11,
    "failures": 0,
    "start": "2022-04-26T02:24:45.952Z",
    "end": "2022-04-26T02:24:54.417Z",
    "duration": 8465,
    "testsRegistered": 97,
    "passPercent": 100,
    "pendingPercent": 11.34020618556701,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48147fec-3520-429d-aac7-077cdbfe8bc6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0e5b41c-632c-4eb8-8fdf-0d3c75945505",
          "title": "Contract: Adoption Contract Unit Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
          "file": "\\test\\contracts\\Adoption.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit Test\"",
              "fullTitle": "Contract: Adoption Contract Unit Test \"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit Test\"",
              "timedOut": false,
              "duration": 267,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "6768789e-0bcf-4cfc-86d2-1671fb6c4e7d",
              "parentUUID": "f0e5b41c-632c-4eb8-8fdf-0d3c75945505",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: Adoption Contract Unit Test\"",
              "fullTitle": "Contract: Adoption Contract Unit Test \"before all\" hook in \"Contract: Adoption Contract Unit Test\"",
              "timedOut": false,
              "duration": 853,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();\nadoption = await Adoption.deployed();\nadoptionFee = await adoption.getAdoptionFee();\n// Initiliase pets.\nfor (let i = 0; i < petCount; i++) {\n  const result = await adoption.addPet(fakeURI, adoptionStates[i], {\n    from: account1,\n  });\n  addPetResults.push(result);\n}\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "905284e5-12f6-4d2c-8b5f-6e33d245a362",
              "parentUUID": "f0e5b41c-632c-4eb8-8fdf-0d3c75945505",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Adoption Contract Unit Test\"",
              "fullTitle": "Contract: Adoption Contract Unit Test \"before each\" hook: before test in \"Contract: Adoption Contract Unit Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "ef12725d-b4d9-4328-af3b-680ea99c7a16",
              "parentUUID": "f0e5b41c-632c-4eb8-8fdf-0d3c75945505",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Adoption Contract Unit Test\"",
              "fullTitle": "Contract: Adoption Contract Unit Test \"after each\" hook: after test in \"Contract: Adoption Contract Unit Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "3f9b7dcf-f30a-4628-8b18-58891c91f8b3",
              "parentUUID": "f0e5b41c-632c-4eb8-8fdf-0d3c75945505",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
              "title": "Testing normal adoption operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully request for adoption of an adoptable pet",
                  "fullTitle": "Contract: Adoption Contract Unit Test Testing normal adoption operations should successfully request for adoption of an adoptable pet",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nexpectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nexpectedAdopter = account2;\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nconst result = await adoption.requestAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst depositPaid = await adoption.getAdopterDeposit(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"LOCKED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption state is equal\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Temporary adopter is equal\"\n);\nassert.isTrue(\n  depositPaid.eq(adoptionFee),\n  \"Deposit paid should be equal to adoption fee\"\n);",
                  "err": {},
                  "uuid": "9eb815bf-2a38-4205-ac4f-6cd07b92f921",
                  "parentUUID": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully approve a pet in LOCKED adoption status with correct arguments",
                  "fullTitle": "Contract: Adoption Contract Unit Test Testing normal adoption operations should successfully approve a pet in LOCKED adoption status with correct arguments",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nexpectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be LOCKED\"\n);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nconst expectedApproval = account2;\nconst result = await adoption.approveAdoption(account2, petID, {\n  from: account1,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"APPROVED\"])\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Account 2 should be approved for adoption\"\n);",
                  "err": {},
                  "uuid": "4db825e8-5920-45b3-ab5c-82c3c54f68e8",
                  "parentUUID": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                  "fullTitle": "Contract: Adoption Contract Unit Test Testing normal adoption operations should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 2;\nconst tipAmount = SNOWdenomination(1000);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nconst account1StartingSNOWBalance = await snow.balanceOf(account1);\nconst account2StartingSNOWBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTED\"];\nconst expectedDeposit = 0;\nconst expectedApproval = emptyAddress;\nconst expectedAccount1Balance =\n  account1StartingSNOWBalance.add(tipAmount);\nconst expectedAccount2Balance = account2StartingSNOWBalance\n  .sub(tipAmount)\n  .add(adoptionFee);\nawait snow.approve(adoption.address, tipAmount, { from: account2 });\nconst result = await adoption.confirmAdoption(petID, tipAmount, {\n  from: account2,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\nconst actualDepositFee = await adoption.getAdopterDeposit(account2);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"ADOPTED\"])\n  );\n});\ntruffleAssert.eventEmitted(result, \"TipsReceived\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.owner == account1 &&\n    ev.amount.eq(tipAmount)\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be ADOPTED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Approval of pet should be an empty address\"\n);\nassert.isTrue(\n  actualDepositFee.eqn(expectedDeposit),\n  \"Deposit should be fully cleared\"\n);\nassert.isTrue(\n  actualAccount1FinalBalance.eq(expectedAccount1Balance),\n  \"Final balance of account 1 should be increased by tip amount\"\n);\nassert.isTrue(\n  actualAccount2FinalBalance.eq(expectedAccount2Balance),\n  \"Final balance of account 2 should be increased by adoption fee and decreased by tip amount\"\n);",
                  "err": {},
                  "uuid": "f40f2f6e-b2b2-459c-9281-7936231786f6",
                  "parentUUID": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a requested adoption successfully and refund correct amount of penalty",
                  "fullTitle": "Contract: Adoption Contract Unit Test Testing normal adoption operations should reject a requested adoption successfully and refund correct amount of penalty",
                  "timedOut": false,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 3;\nconst penalty = adoptionFee.divn(2);\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(penalty);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.rejectAdoption(account2, petID, {\n  from: account1,\n});\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"REJECTED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after rejection is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after rejection is incorrect\"\n);",
                  "err": {},
                  "uuid": "ef0cd4f0-4c64-4b60-ba3c-c0ef2792476a",
                  "parentUUID": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cancel an approved adoption successfully and refund correct amount of penalty",
                  "fullTitle": "Contract: Adoption Contract Unit Test Testing normal adoption operations should cancel an approved adoption successfully and refund correct amount of penalty",
                  "timedOut": false,
                  "duration": 333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 4;\nconst penalty = await adoption.getPenaltyRefundFee();\nconst donation = adoptionFee.sub(penalty);\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });\nawait adoption.approveAdoption(account2, petID, { from: account1 });\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(donation);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.cancelAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"CANCELLED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after cancellation is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after cancellation is incorrect\"\n);",
                  "err": {},
                  "uuid": "6ff3ed98-01f4-4054-91fc-607df9e1f0df",
                  "parentUUID": "2addfd47-8d3c-4f01-8889-78ff1117f5bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9eb815bf-2a38-4205-ac4f-6cd07b92f921",
                "4db825e8-5920-45b3-ab5c-82c3c54f68e8",
                "f40f2f6e-b2b2-459c-9281-7936231786f6",
                "ef0cd4f0-4c64-4b60-ba3c-c0ef2792476a",
                "6ff3ed98-01f4-4054-91fc-607df9e1f0df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1042,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "3424428d-f639-449e-b3a0-b37a30a96f94",
              "title": "Test reverts for add pet method",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on adding pet with invalid new status LOCKED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status LOCKED",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "e54a23ab-d2db-442f-bc03-37c29f008244",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status APPROVED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status APPROVED",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "3d63d29f-159b-4185-a52d-647c106f7b70",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADOPTED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status ADOPTED",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "b3fbdef7-33b1-4cd6-9a4a-77599607efed",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REJECTED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status REJECTED",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "35a542a1-a37f-4d94-938b-bfe2d4f245d0",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status CANCELLED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status CANCELLED",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "8d859408-aa74-4360-bba2-937fe74bc240",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADDED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status ADDED",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "ecd88420-e542-478f-90f2-8e2d4da0095c",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REMOVED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status REMOVED",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "812a5293-f3a3-483c-a5f2-f5770b5f0cf3",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status EUTHANISED",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for add pet method should revert on adding pet with invalid new status EUTHANISED",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "7996fc92-34a4-4c99-897f-465b464ed584",
                  "parentUUID": "3424428d-f639-449e-b3a0-b37a30a96f94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e54a23ab-d2db-442f-bc03-37c29f008244",
                "3d63d29f-159b-4185-a52d-647c106f7b70",
                "b3fbdef7-33b1-4cd6-9a4a-77599607efed",
                "35a542a1-a37f-4d94-938b-bfe2d4f245d0",
                "8d859408-aa74-4360-bba2-937fe74bc240",
                "ecd88420-e542-478f-90f2-8e2d4da0095c",
                "812a5293-f3a3-483c-a5f2-f5770b5f0cf3",
                "7996fc92-34a4-4c99-897f-465b464ed584"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 435,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "763b5ae7-0b38-49aa-84b6-138dba242348",
              "title": "Test reverts for request method",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for request method\"",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method \"before all\" hook in \"Test reverts for request method\"",
                  "timedOut": false,
                  "duration": 36,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await snow.approve(adoption.address, adoptionFee * 2, { from: account2 });",
                  "err": {},
                  "uuid": "aab2aac4-9ef9-4cd6-88b8-171635ceeba7",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on requesting nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert on requesting nonexistent pet ID",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.requestAdoption(petCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "8b595e51-3a21-4f57-8182-987b789eff78",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "93fc189c-b7ed-40bf-9e06-6304b0ace5c3",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "4cd49b10-7352-446c-b841-84021d89f093",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "77266499-f6b2-4f3e-968c-9753a5359de2",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "f0c3b824-4b88-40d6-9a56-eb6b61f41b3b",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 9,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "406dcb15-3d71-41fb-9ffb-d725974e22a2",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 12,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "814fc609-3f81-4017-b383-104806741151",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "cce7c102-169a-4480-8f3d-b7df571e2e43",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "437f9c8e-b3b7-4337-8bc2-fe9af86ccdf1",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "efa927d6-58ea-42fe-a92e-65fb9ec640ba",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a request on a non adoptable pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for request method should revert a request on a non adoptable pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 8,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "c57b12fd-d66e-47d2-8014-4762c420c39c",
                  "parentUUID": "763b5ae7-0b38-49aa-84b6-138dba242348",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b595e51-3a21-4f57-8182-987b789eff78",
                "93fc189c-b7ed-40bf-9e06-6304b0ace5c3",
                "4cd49b10-7352-446c-b841-84021d89f093",
                "77266499-f6b2-4f3e-968c-9753a5359de2"
              ],
              "failures": [],
              "pending": [
                "f0c3b824-4b88-40d6-9a56-eb6b61f41b3b",
                "406dcb15-3d71-41fb-9ffb-d725974e22a2",
                "814fc609-3f81-4017-b383-104806741151",
                "cce7c102-169a-4480-8f3d-b7df571e2e43",
                "437f9c8e-b3b7-4337-8bc2-fe9af86ccdf1",
                "efa927d6-58ea-42fe-a92e-65fb9ec640ba",
                "c57b12fd-d66e-47d2-8014-4762c420c39c"
              ],
              "skipped": [],
              "duration": 483,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
              "title": "Test reverts for approve and reject methods",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for approve and reject methods\"",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods \"before all\" hook in \"Test reverts for approve and reject methods\"",
                  "timedOut": false,
                  "duration": 73,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await adoption.requestAdoption(lockedPet, { from: account2 });",
                  "err": {},
                  "uuid": "7f18d21e-accd-4b1b-b03f-9d6e2edc4beb",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on approving nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert on approving nonexistent pet ID",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account2, petCount, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "84db1acf-cdf4-4c92-ad01-dd77660a500b",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on rejecting nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert on rejecting nonexistent pet ID",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account2, petCount, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "6343de6a-f190-4654-8d3c-3eb00067fe4d",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "561f35b5-8c57-4a24-82f3-bb8ce41e26af",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "8d0d5638-1cf3-4665-a22c-981e5814aa73",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "55e10390-7c05-49b6-90ba-7bf6dc016425",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "daa28e42-0501-48ec-ba5c-330ec4d56ed3",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "5ecdb1ca-f3d8-4025-b532-28e9c2469236",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "a9f3eccd-c2cc-443f-b69a-93942b6a3348",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "26ee4781-d0af-4a85-a8df-8b78130df28e",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "1299dcde-52b5-43ce-944f-c233110f2161",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "9a5cd6af-26de-43b4-a265-b8292752b23e",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "ecde2e8d-5513-4c57-950b-4286458d525c",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 6,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "db20c64c-1000-462c-88c1-9947ee53634e",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 6,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0bcc80ec-8410-41c9-bd90-25d16f3449d5",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "f22fad85-e132-4931-b889-a23d59e19f3d",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "5eef607c-14e9-41d6-a2dc-c22f2a508c2a",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "8c7ff963-8ceb-49c8-b729-06346da400e9",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "b0be2cfe-1f5e-4959-9082-cd900951f87a",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "6f50a829-a2c8-4ee8-ba37-b5dab2811ce4",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0c69a25b-feba-4ce3-bc8a-95706f4e9aae",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an approval on a non requested pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "52bb1ca9-febf-472a-b57a-ff2499c6029e",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a rejection on a non requested pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "fcdcbc58-e725-4510-94a3-99ee6c7ce4b8",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on approving unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert on approving unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "ac700195-f7e9-410f-a07d-f798010c18db",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on rejecting unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for approve and reject methods should revert on rejecting unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "2fbbf0e7-61a1-4a32-b645-4d987d28a549",
                  "parentUUID": "b64013b4-a4c6-442a-a2ed-cfe0325d6a18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84db1acf-cdf4-4c92-ad01-dd77660a500b",
                "6343de6a-f190-4654-8d3c-3eb00067fe4d",
                "561f35b5-8c57-4a24-82f3-bb8ce41e26af",
                "8d0d5638-1cf3-4665-a22c-981e5814aa73",
                "55e10390-7c05-49b6-90ba-7bf6dc016425",
                "daa28e42-0501-48ec-ba5c-330ec4d56ed3",
                "5ecdb1ca-f3d8-4025-b532-28e9c2469236",
                "a9f3eccd-c2cc-443f-b69a-93942b6a3348",
                "26ee4781-d0af-4a85-a8df-8b78130df28e",
                "1299dcde-52b5-43ce-944f-c233110f2161",
                "9a5cd6af-26de-43b4-a265-b8292752b23e",
                "ecde2e8d-5513-4c57-950b-4286458d525c",
                "f22fad85-e132-4931-b889-a23d59e19f3d",
                "5eef607c-14e9-41d6-a2dc-c22f2a508c2a",
                "8c7ff963-8ceb-49c8-b729-06346da400e9",
                "b0be2cfe-1f5e-4959-9082-cd900951f87a",
                "6f50a829-a2c8-4ee8-ba37-b5dab2811ce4",
                "0c69a25b-feba-4ce3-bc8a-95706f4e9aae",
                "52bb1ca9-febf-472a-b57a-ff2499c6029e",
                "fcdcbc58-e725-4510-94a3-99ee6c7ce4b8",
                "ac700195-f7e9-410f-a07d-f798010c18db",
                "2fbbf0e7-61a1-4a32-b645-4d987d28a549"
              ],
              "failures": [],
              "pending": [
                "db20c64c-1000-462c-88c1-9947ee53634e",
                "0bcc80ec-8410-41c9-bd90-25d16f3449d5"
              ],
              "skipped": [],
              "duration": 1442,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "5e66f7de-5701-47a2-ab32-f14356740efa",
              "title": "Test reverts for confirm and cancel methods",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Test reverts for confirm and cancel methods\"",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods \"before all\" hook in \"Test reverts for confirm and cancel methods\"",
                  "timedOut": false,
                  "duration": 111,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await adoption.requestAdoption(approvedPet, { from: account2 });\nawait adoption.approveAdoption(account2, approvedPet, { from: account1 });",
                  "err": {},
                  "uuid": "d3c0fe3e-1d5f-4a73-9b05-50de570582c2",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on confirming nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming nonexistent pet ID",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(petCount, 0, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "70e54321-5230-44ac-971c-bfdd5239ff7e",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling nonexistent pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling nonexistent pet ID",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(petCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "2a033d14-14a3-4d15-a794-6f18ece11e4c",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "adde5065-ec2b-4ed8-8e7d-002fdd74e9c7",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 0",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 0",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "0eaa8175-996e-4f3c-8b24-cb6466e97caf",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "5cf41610-008b-4260-9b52-d936f1f8d8cb",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "226febea-49b4-4660-b1a2-f1a83b3d0e8a",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e4311f3c-45d9-486d-b85f-87fcf867442e",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 1",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 1",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "359d4f6f-b211-481b-809f-a31945b8eaa7",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "bb0018f9-5102-4bac-8296-5640c718f692",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "58b0cd7f-ca12-4647-a681-d80b27d6a8b0",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "cfe4ec3b-e8f8-46da-a06b-e056b011cb90",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 2",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 2",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "2f54e5ec-0575-4b09-b449-3afbcaccce24",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "6bec5a32-8b83-4387-bdf0-28d040425d70",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "6b7049d0-a897-463d-856a-677594b4c868",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "dec788c7-ff16-4dd0-9dfa-8be2f98152d4",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 3",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 3",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "9f0f7b90-1039-4648-9678-c56e66f79c69",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "724451ac-e9ae-4546-806b-e2eba34090f9",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "db7b4266-809f-4187-9810-77912e3f09d7",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "d35a51c2-3bde-4a29-8b83-4e6264689287",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 4",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 4",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "a35c0f47-1196-43e7-ba63-7181888fd39c",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "b6ea7b39-59b3-404a-b9c0-894ffdaf6c8f",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "f0703260-d2da-4fe1-bad2-56afdc372942",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "e252f61c-b061-4fa4-8fba-1192876061f4",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 5",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 5",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "4838f5f5-402c-4136-92c4-5976da851489",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "302982f8-830a-4070-aad0-7208706c9c09",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "04cee105-fba5-4c77-b945-b533385d3559",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 6,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "7b0008a9-f38c-4685-b52f-e8f51472025d",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 6",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 6",
                  "timedOut": false,
                  "duration": 7,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "f4d67166-309f-4498-92e6-401e62bcabcf",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "e9667ca1-0139-4e23-afd6-281f0c8657f9",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "06a78c6a-cf62-427d-959c-2e3ae8090eec",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "8fbb52b6-2d4a-4645-940a-60177b4f1bad",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 7",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 7",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "32e86a8d-02be-42d4-a9f9-a7c943e4d03c",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "119e566d-ee9c-4865-aef0-672b0b3561cf",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "49ffb7bd-f0e3-4370-9c34-dbc49b5ec695",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "a8501c99-8843-490f-9b46-898d8088e202",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 8",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 8",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "176ffe1a-9544-46ee-8f3d-43aab827fdd6",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "e0cbfa7f-c57e-45ad-ae6f-2cd12aa3f9be",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "f7f8535c-63f2-4ddf-97c6-bc4cb4cb0eb8",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert a confirmation on a non approved pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "1efca9c5-ec6f-4e5a-bc6e-bffb2952d24a",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert an cancellation on a non approved pet, pet ID: 9",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 9",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                  "err": {},
                  "uuid": "5d9bb593-d59f-4967-b68d-a53847ffe8d5",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on confirming unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "02f5eb98-53bf-495e-8714-5b384b2dfca1",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on cancelling unmatched adopter and pet ID",
                  "fullTitle": "Contract: Adoption Contract Unit Test Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                  "err": {},
                  "uuid": "b43091db-b3a1-40b7-9e0a-f0cc99afb4f6",
                  "parentUUID": "5e66f7de-5701-47a2-ab32-f14356740efa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70e54321-5230-44ac-971c-bfdd5239ff7e",
                "2a033d14-14a3-4d15-a794-6f18ece11e4c",
                "adde5065-ec2b-4ed8-8e7d-002fdd74e9c7",
                "0eaa8175-996e-4f3c-8b24-cb6466e97caf",
                "5cf41610-008b-4260-9b52-d936f1f8d8cb",
                "226febea-49b4-4660-b1a2-f1a83b3d0e8a",
                "e4311f3c-45d9-486d-b85f-87fcf867442e",
                "359d4f6f-b211-481b-809f-a31945b8eaa7",
                "bb0018f9-5102-4bac-8296-5640c718f692",
                "58b0cd7f-ca12-4647-a681-d80b27d6a8b0",
                "cfe4ec3b-e8f8-46da-a06b-e056b011cb90",
                "2f54e5ec-0575-4b09-b449-3afbcaccce24",
                "6bec5a32-8b83-4387-bdf0-28d040425d70",
                "6b7049d0-a897-463d-856a-677594b4c868",
                "dec788c7-ff16-4dd0-9dfa-8be2f98152d4",
                "9f0f7b90-1039-4648-9678-c56e66f79c69",
                "724451ac-e9ae-4546-806b-e2eba34090f9",
                "db7b4266-809f-4187-9810-77912e3f09d7",
                "d35a51c2-3bde-4a29-8b83-4e6264689287",
                "a35c0f47-1196-43e7-ba63-7181888fd39c",
                "b6ea7b39-59b3-404a-b9c0-894ffdaf6c8f",
                "f0703260-d2da-4fe1-bad2-56afdc372942",
                "e252f61c-b061-4fa4-8fba-1192876061f4",
                "4838f5f5-402c-4136-92c4-5976da851489",
                "302982f8-830a-4070-aad0-7208706c9c09",
                "04cee105-fba5-4c77-b945-b533385d3559",
                "e9667ca1-0139-4e23-afd6-281f0c8657f9",
                "06a78c6a-cf62-427d-959c-2e3ae8090eec",
                "8fbb52b6-2d4a-4645-940a-60177b4f1bad",
                "32e86a8d-02be-42d4-a9f9-a7c943e4d03c",
                "119e566d-ee9c-4865-aef0-672b0b3561cf",
                "49ffb7bd-f0e3-4370-9c34-dbc49b5ec695",
                "a8501c99-8843-490f-9b46-898d8088e202",
                "176ffe1a-9544-46ee-8f3d-43aab827fdd6",
                "e0cbfa7f-c57e-45ad-ae6f-2cd12aa3f9be",
                "f7f8535c-63f2-4ddf-97c6-bc4cb4cb0eb8",
                "1efca9c5-ec6f-4e5a-bc6e-bffb2952d24a",
                "5d9bb593-d59f-4967-b68d-a53847ffe8d5",
                "02f5eb98-53bf-495e-8714-5b384b2dfca1",
                "b43091db-b3a1-40b7-9e0a-f0cc99afb4f6"
              ],
              "failures": [],
              "pending": [
                "7b0008a9-f38c-4685-b52f-e8f51472025d",
                "f4d67166-309f-4498-92e6-401e62bcabcf"
              ],
              "skipped": [],
              "duration": 2407,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
          "title": "Contract: Donation Contract Unit Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
          "file": "\\test\\contracts\\Donation.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test \"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test\"",
              "timedOut": false,
              "duration": 121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "8b08654d-59f0-4fe6-9d7f-a018b346751d",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: Donation Contract Unit Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test \"before all\" hook in \"Contract: Donation Contract Unit Test\"",
              "timedOut": false,
              "duration": 121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();\ndonation = await Donation.deployed();\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "ec4269b2-e4f6-4cd2-8f71-86b356c7ed35",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Donation Contract Unit Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test \"before each\" hook: before test in \"Contract: Donation Contract Unit Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "8fe8a544-b84a-4e53-b3d1-82a0da0fbb26",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Donation Contract Unit Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test \"after each\" hook: after test in \"Contract: Donation Contract Unit Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "94de0ef2-672c-40cf-99f6-6f5d111e4cf5",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should revert on 0 amount donation",
              "fullTitle": "Contract: Donation Contract Unit Test should revert on 0 amount donation",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = \"Good luck\";\nawait truffleAssert.fails(\n  donation.donateETH(message, { from: account2, value: \"0\" }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"ETH donation incorrectly passed with amount 0\"\n);\nawait truffleAssert.fails(\n  donation.donateSNOW(\"0\", message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"SNOW donation incorrectly passed with amount 0\"\n);",
              "err": {},
              "uuid": "32407835-9b6e-4209-b0d2-019628d64294",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should revert on insufficient allowance",
              "fullTitle": "Contract: Donation Contract Unit Test should revert on insufficient allowance",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = \"Good luck\";\nconst donateAmount = SNOWdenomination(50000);\nawait snow.approve(donation.address, donateAmount.subn(1));\nawait truffleAssert.fails(\n  donation.donateSNOW(donateAmount, message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"insufficient allowance\",\n  \"SNOW donation incorrectly passed with insufficient allowance\"\n);",
              "err": {},
              "uuid": "1a09bba6-6835-4fa1-ab23-e212e18980f8",
              "parentUUID": "17ee5e3c-1e4b-470e-a50b-2ad37ab7aa2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "02760632-3e4e-4d3f-adc1-f0d06f73b8c8",
              "title": "Testing normal donation operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
              "file": "\\test\\contracts\\Donation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should donate correct amount of SNOW with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test Testing normal donation operations should donate correct amount of SNOW with correct message to the owner",
                  "timedOut": false,
                  "duration": 182,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst expectedTokenType = tokenTypeToNum[\"SNOW\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = SNOWdenomination(50000);\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nawait snow.approve(donation.address, donateAmount, { from: account2 });\nconst result = await donation.donateSNOW(donateAmount, donateMessage, {\n  from: account2,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "0e518432-b14d-4a0f-a9d8-8781496e90f1",
                  "parentUUID": "02760632-3e4e-4d3f-adc1-f0d06f73b8c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should donate correct amount of ETH with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test Testing normal donation operations should donate correct amount of ETH with correct message to the owner",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = BN(await web3.eth.getBalance(account1));\nconst account2StartingBalance = BN(await web3.eth.getBalance(account2));\nconst expectedTokenType = tokenTypeToNum[\"ETH\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = BN(Web3.utils.toWei(\"0.05\", \"ether\"));\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nvar expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nconst result = await donation.donateETH(donateMessage, {\n  from: account2,\n  value: donateAmount,\n});\nconst actualAccount1FinalBalance = BN(\n  await web3.eth.getBalance(account1)\n);\nconst actualAccount2FinalBalance = BN(\n  await web3.eth.getBalance(account2)\n);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst gasPrice = BN(result.receipt.effectiveGasPrice);\nconst gasUsed = BN(result.receipt.gasUsed);\nconst gasCost = gasPrice.mul(gasUsed);\nexpectedAccount2FinalBalance.isub(gasCost);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "b92d9663-10aa-472c-9b9b-a839f89d7290",
                  "parentUUID": "02760632-3e4e-4d3f-adc1-f0d06f73b8c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e518432-b14d-4a0f-a9d8-8781496e90f1",
                "b92d9663-10aa-472c-9b9b-a839f89d7290"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 255,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [
            "32407835-9b6e-4209-b0d2-019628d64294",
            "1a09bba6-6835-4fa1-ab23-e212e18980f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e04d6684-8307-4395-88b4-b8734012e7cd",
          "title": "Contract: ShelterNOW Contract Unit Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
          "file": "\\test\\contracts\\ShelterNOW.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test \"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "dede487a-d172-4dd9-8a29-ac5bd8fbb670",
              "parentUUID": "e04d6684-8307-4395-88b4-b8734012e7cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: ShelterNOW Contract Unit Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test \"before all\" hook in \"Contract: ShelterNOW Contract Unit Test\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.deployed();",
              "err": {},
              "uuid": "ef6bb9c3-7356-45d0-acea-24dbfc1bfc94",
              "parentUUID": "e04d6684-8307-4395-88b4-b8734012e7cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test \"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "5b1e9af1-0dc9-4e93-939c-1f2a22cd3bf7",
              "parentUUID": "e04d6684-8307-4395-88b4-b8734012e7cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test \"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "d6f007f1-92da-4122-a19c-eda946d9f2da",
              "parentUUID": "e04d6684-8307-4395-88b4-b8734012e7cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should revert on insufficient balance",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test should revert on insufficient balance",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account2Balance = await snow.balanceOf(account2);\ntruffleAssert.fails(\n  snow.transfer(account1, account2Balance.addn(1), { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"transfer amount exceeds balance\",\n  \"ShelterNOW transfer incorrectly passes with insufficient balance\"\n);",
              "err": {},
              "uuid": "4c7a130d-87e6-4eb0-b831-593cfc26d426",
              "parentUUID": "e04d6684-8307-4395-88b4-b8734012e7cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3e535d56-8414-4ecd-b963-cbe836aa58c0",
              "title": "Testing normal ShelterNOW operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
              "file": "\\test\\contracts\\ShelterNOW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer token and receive token correctly",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test Testing normal ShelterNOW operations should transfer token and receive token correctly",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst transferAmount = SNOWdenomination(100);\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.sub(transferAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.add(transferAmount);\nconst result = await snow.transfer(account2, transferAmount, {\n  from: account1,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"Transfer\", (ev) => {\n  return (\n    ev.from == account1 &&\n    ev.to == account2 &&\n    ev.value.eq(transferAmount)\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Balance of account 1 is incorrect after transfer\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Balance of account 2 is incorrect after transfer\"\n);",
                  "err": {},
                  "uuid": "696f60b9-cdbc-4dbb-bf5d-2fdd029bced9",
                  "parentUUID": "3e535d56-8414-4ecd-b963-cbe836aa58c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly approve spending allowance to another account",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test Testing normal ShelterNOW operations should correctly approve spending allowance to another account",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const owner = account1;\nconst spender = account2;\nconst startingAllowance = await snow.allowance(owner, spender);\nconst givenAllowance = SNOWdenomination(200);\nconst expectedAllowance = SNOWdenomination(200);\nconst result = await snow.approve(spender, givenAllowance, {\n  from: owner,\n});\nconst actualAllowance = await snow.allowance(owner, spender);\ntruffleAssert.eventEmitted(result, \"Approval\", (ev) => {\n  return (\n    ev.owner == owner &&\n    ev.spender == spender &&\n    ev.value.eq(expectedAllowance)\n  );\n});\nassert.isTrue(\n  startingAllowance.eqn(0),\n  \"Starting allowance should be equal to 0\"\n);\nassert.isTrue(\n  expectedAllowance.eq(actualAllowance),\n  \"Expected allowance is not equal to the actual allowance\"\n);",
                  "err": {},
                  "uuid": "6e441b80-22a5-4d5b-905a-9795df5d4ab5",
                  "parentUUID": "3e535d56-8414-4ecd-b963-cbe836aa58c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "696f60b9-cdbc-4dbb-bf5d-2fdd029bced9",
                "6e441b80-22a5-4d5b-905a-9795df5d4ab5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [
            "4c7a130d-87e6-4eb0-b831-593cfc26d426"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "currency": "USD",
        "coinmarketcap": "2145d89c-8649-48b6-867c-3b574a6faefe",
        "outputFile": "./gas-output/gas-output.txt",
        "noColors": true,
        "excludeContracts": [
          "Migrations",
          "Pet"
        ]
      },
      "version": "6.2.0"
    }
  }
}