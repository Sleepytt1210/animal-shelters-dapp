{
  "stats": {
    "suites": 17,
    "tests": 68,
    "passes": 63,
    "pending": 5,
    "failures": 0,
    "start": "2022-05-06T14:34:26.002Z",
    "end": "2022-05-06T14:34:36.536Z",
    "duration": 10534,
    "testsRegistered": 68,
    "passPercent": 100,
    "pendingPercent": 7.352941176470589,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a0b99e92-85f2-4cde-956f-8a7252245aba",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3a13d015-9a2c-475c-b34e-0412abf09b23",
          "title": "Contract: Adoption Contract Unit and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
          "file": "\\test\\contracts\\Adoption.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before all\" hook: prepare suite in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 267,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "a63fde55-d13d-41b7-8f47-5de46a2f6dc1",
              "parentUUID": "3a13d015-9a2c-475c-b34e-0412abf09b23",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before each\" hook: before test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "1fbe7deb-de96-48fb-8b88-294bd18b04b7",
              "parentUUID": "3a13d015-9a2c-475c-b34e-0412abf09b23",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"before each\" hook in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 169,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.new();\nadoption = await Adoption.new(snow.address);\nadoptionFee = await adoption.getAdoptionFee();\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "cb373e6b-e58e-48cd-995c-372c5221dc81",
              "parentUUID": "3a13d015-9a2c-475c-b34e-0412abf09b23",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test \"after each\" hook: after test in \"Contract: Adoption Contract Unit and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "7c18ee49-5b43-4073-ae0c-07c4215ab6ff",
              "parentUUID": "3a13d015-9a2c-475c-b34e-0412abf09b23",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should successfully add 2 pets to the blockchain",
              "fullTitle": "Contract: Adoption Contract Unit and Integration Test should successfully add 2 pets to the blockchain",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startingPetCount = await adoption.totalSupply();\nassert.isTrue(startingPetCount.eqn(0), \"Starting pet count should be 0\");\nconst expectedPetCount = 2;\nconst result1 = await adoption.addPet(fakeURI, adoptionStates[0], {\n  from: account1,\n});\nconst result2 = await adoption.addPet(fakeURI, adoptionStates[0], {\n  from: account1,\n});\nconst actualPetCount = await adoption.totalSupply();\ntruffleAssert.eventEmitted(result1, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(0) &&\n    ev.status.eqn(adoptionStateToNum[\"ADDED\"])\n  );\n});\ntruffleAssert.eventEmitted(result2, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(1) &&\n    ev.status.eqn(adoptionStateToNum[\"ADDED\"])\n  );\n});\nassert.isTrue(\n  actualPetCount.eqn(expectedPetCount),\n  \"Actual pet count is incorrect after pets are added\"\n);",
              "err": {},
              "uuid": "1c2c2856-2d06-4a3f-8af6-1dfe5c32e621",
              "parentUUID": "3a13d015-9a2c-475c-b34e-0412abf09b23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5543dc56-cd9d-49ec-be47-badf1c985e96",
              "title": "Testing normal adoption operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Testing normal adoption operations\"",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations \"before each\" hook in \"Testing normal adoption operations\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Initiliase pets.\nfor (let i = 0; i < petCount; i++) {\n  await adoption.addPet(fakeURI, adoptionStates[i], {\n    from: account1,\n  });\n}",
                  "err": {},
                  "uuid": "666a82fd-e27e-40b4-bda7-3f2ef60a212f",
                  "parentUUID": "5543dc56-cd9d-49ec-be47-badf1c985e96",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully request for adoption of an adoptable pet",
                  "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations should successfully request for adoption of an adoptable pet",
                  "timedOut": false,
                  "duration": 143,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const petID = 1;\nexpectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nexpectedAdopter = account2;\nawait snow.approve(adoption.address, adoptionFee, { from: account2 });\nconst result = await adoption.requestAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst depositPaid = await adoption.getAdopterDeposit(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"LOCKED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption state is equal\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Temporary adopter is equal\"\n);\nassert.isTrue(\n  depositPaid.eq(adoptionFee),\n  \"Deposit paid should be equal to adoption fee\"\n);",
                  "err": {},
                  "uuid": "2857416e-c842-4a42-b2a8-fa5fc2f11050",
                  "parentUUID": "5543dc56-cd9d-49ec-be47-badf1c985e96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "f6adc2b1-6929-4bd2-86be-f0489f07afba",
                  "title": "Testing pets in locked state",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Testing pets in locked state\"",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in locked state \"before each\" hook in \"Testing pets in locked state\"",
                      "timedOut": false,
                      "duration": 106,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });",
                      "err": {},
                      "uuid": "297b3b4c-641e-45da-b6e2-55f01ddfecc5",
                      "parentUUID": "f6adc2b1-6929-4bd2-86be-f0489f07afba",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully approve a pet in LOCKED adoption status with correct arguments",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in locked state should successfully approve a pet in LOCKED adoption status with correct arguments",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectedAdoptionState = adoptionStateToNum[\"LOCKED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be LOCKED\"\n);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nconst expectedApproval = account2;\nconst result = await adoption.approveAdoption(account2, petID, {\n  from: account1,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"APPROVED\"])\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Account 2 should be approved for adoption\"\n);",
                      "err": {},
                      "uuid": "74df7d16-c441-422b-b22a-cdeed0f88b90",
                      "parentUUID": "f6adc2b1-6929-4bd2-86be-f0489f07afba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject a requested adoption successfully and refund correct amount of penalty",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in locked state should reject a requested adoption successfully and refund correct amount of penalty",
                      "timedOut": false,
                      "duration": 145,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const penalty = adoptionFee.divn(2);\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(penalty);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.rejectAdoption(account2, petID, {\n  from: account1,\n});\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"REJECTED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after rejection is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after rejection is incorrect\"\n);",
                      "err": {},
                      "uuid": "c158b9d4-e997-46dc-9341-0c7801f0160a",
                      "parentUUID": "f6adc2b1-6929-4bd2-86be-f0489f07afba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "74df7d16-c441-422b-b22a-cdeed0f88b90",
                    "c158b9d4-e997-46dc-9341-0c7801f0160a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 214,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                },
                {
                  "uuid": "7c359cb5-fcd2-4beb-83e4-e5380bf95c56",
                  "title": "Testing pets in approved state",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Testing pets in approved state\"",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in approved state \"before each\" hook in \"Testing pets in approved state\"",
                      "timedOut": false,
                      "duration": 122,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await snow.approve(adoption.address, adoptionFee, { from: account2 });\nawait adoption.requestAdoption(petID, { from: account2 });\nawait adoption.approveAdoption(account2, petID);",
                      "err": {},
                      "uuid": "268ed2fd-3af9-4848-93aa-2f432bd3cff8",
                      "parentUUID": "7c359cb5-fcd2-4beb-83e4-e5380bf95c56",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in approved state should successfully confirm adoption, transfer tip correctly and get deposit refunded",
                      "timedOut": false,
                      "duration": 196,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tipAmount = SNOWdenomination(1000);\nexpectedAdoptionState = adoptionStateToNum[\"APPROVED\"];\nvar actualState = await adoption.getAdoptionState(petID);\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption State should be APPROVED\"\n);\nconst account1StartingSNOWBalance = await snow.balanceOf(account1);\nconst account2StartingSNOWBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTED\"];\nconst expectedDeposit = 0;\nconst expectedApproval = emptyAddress;\nconst expectedAccount1Balance =\n  account1StartingSNOWBalance.add(tipAmount);\nconst expectedAccount2Balance = account2StartingSNOWBalance\n  .sub(tipAmount)\n  .add(adoptionFee);\nawait snow.approve(adoption.address, tipAmount, { from: account2 });\nconst result = await adoption.confirmAdoption(petID, tipAmount, {\n  from: account2,\n});\nactualState = await adoption.getAdoptionState(petID);\nconst actualApproval = await adoption.getApproved(petID);\nconst actualDepositFee = await adoption.getAdopterDeposit(account2);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"ADOPTED\"])\n  );\n});\ntruffleAssert.eventEmitted(result, \"TipsReceived\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.owner == account1 &&\n    ev.amount.eq(tipAmount)\n  );\n});\nassert.equal(\n  actualState,\n  expectedAdoptionState,\n  \"Adoption State should be ADOPTED\"\n);\nassert.equal(\n  actualApproval,\n  expectedApproval,\n  \"Approval of pet should be an empty address\"\n);\nassert.isTrue(\n  actualDepositFee.eqn(expectedDeposit),\n  \"Deposit should be fully cleared\"\n);\nassert.isTrue(\n  actualAccount1FinalBalance.eq(expectedAccount1Balance),\n  \"Final balance of account 1 should be increased by tip amount\"\n);\nassert.isTrue(\n  actualAccount2FinalBalance.eq(expectedAccount2Balance),\n  \"Final balance of account 2 should be increased by adoption fee and decreased by tip amount\"\n);",
                      "err": {},
                      "uuid": "67466930-b5db-4adc-b44c-e576d9b633e7",
                      "parentUUID": "7c359cb5-fcd2-4beb-83e4-e5380bf95c56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should cancel an approved adoption successfully and refund correct amount of penalty",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Testing pets in approved state should cancel an approved adoption successfully and refund correct amount of penalty",
                      "timedOut": false,
                      "duration": 141,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const penalty = await adoption.getPenaltyRefundFee();\nconst donation = adoptionFee.sub(penalty);\nconst account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nexpectedAdoptionState = adoptionStateToNum[\"ADOPTABLE\"];\nexpectedAdopter = account1;\nconst expectedAccount1Balance = account1StartingBalance.add(donation);\nconst expectedAccount2Balance = account2StartingBalance.add(penalty);\nconst result = await adoption.cancelAdoption(petID, { from: account2 });\nconst actualState = await adoption.getAdoptionState(petID);\nconst actualAdopter = await adoption.getTempAdopterOf(petID);\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account2 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"CANCELLED\"])\n  );\n});\nassert.equal(\n  actualState.toNumber(),\n  expectedAdoptionState,\n  \"Adoption Status should be ADOPTABLE\"\n);\nassert.equal(\n  actualAdopter,\n  expectedAdopter,\n  \"Adopter should be the shelter owner\"\n);\nassert.isTrue(\n  expectedAccount1Balance.eq(actualAccount1FinalBalance),\n  \"Owner account balance after cancellation is incorrect\"\n);\nassert.isTrue(\n  expectedAccount2Balance.eq(actualAccount2FinalBalance),\n  \"Adopter account balance after cancellation is incorrect\"\n);",
                      "err": {},
                      "uuid": "c7d64a4e-7571-4185-a583-2a4455969d05",
                      "parentUUID": "7c359cb5-fcd2-4beb-83e4-e5380bf95c56",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "67466930-b5db-4adc-b44c-e576d9b633e7",
                    "c7d64a4e-7571-4185-a583-2a4455969d05"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 337,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                },
                {
                  "uuid": "264dee78-471b-4fa4-af5f-00a5fe9b590a",
                  "title": "Adoption Status manipulation methods",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully change an adoption state of a non-available pet to adoptable",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Adoption Status manipulation methods should successfully change an adoption state of a non-available pet to adoptable",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const petID = 0;\nconst originalState = await adoption.getAdoptionState(petID);\nconst result = await adoption.setPetAdoptable(petID);\nconst actualState = await adoption.getAdoptionState(petID);\nconst expectedState = 1;\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(adoptionStateToNum[\"ADOPTABLE\"])\n  );\n});\nassert.isTrue(\n  originalState.eqn(0),\n  \"Original state should be NONAVAIL\"\n);\nassert.isTrue(\n  actualState.eqn(expectedState),\n  \"Expected state should ADOPTABLE\"\n);",
                      "err": {},
                      "uuid": "5913fbf9-ae7b-4997-b066-0389fba73043",
                      "parentUUID": "264dee78-471b-4fa4-af5f-00a5fe9b590a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully change an adoption state of an adoptable pet to non-adoptable (REMOVED)",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Adoption Status manipulation methods should successfully change an adoption state of an adoptable pet to non-adoptable (REMOVED)",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const petID = 1;\nconst reason = adoptionStateToNum[\"REMOVED\"];\nconst originalState = await adoption.getAdoptionState(petID);\nconst result = await adoption.setPetNotAdoptable(petID, reason);\nconst actualState = await adoption.getAdoptionState(petID);\nconst expectedState = 0;\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(reason)\n  );\n});\nassert.isTrue(\n  originalState.eqn(1),\n  \"Original state should be ADOPTABLE\"\n);\nassert.isTrue(\n  actualState.eqn(expectedState),\n  \"Expected state should NONAVAIL\"\n);",
                      "err": {},
                      "uuid": "3fd18f2b-0665-48f2-9f5b-70429ed924e1",
                      "parentUUID": "264dee78-471b-4fa4-af5f-00a5fe9b590a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully change an adoption state of an adoptable pet to non-adoptable (EUTHANISED)",
                      "fullTitle": "Contract: Adoption Contract Unit and Integration Test Testing normal adoption operations Adoption Status manipulation methods should successfully change an adoption state of an adoptable pet to non-adoptable (EUTHANISED)",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const petID = 1;\nconst reason = adoptionStateToNum[\"EUTHANISED\"];\nconst originalState = await adoption.getAdoptionState(petID);\nconst result = await adoption.setPetNotAdoptable(petID, reason);\nconst actualState = await adoption.getAdoptionState(petID);\nconst expectedState = 0;\ntruffleAssert.eventEmitted(result, \"AdoptionStatus\", (ev) => {\n  return (\n    ev.adopter == account1 &&\n    ev.petID.eqn(petID) &&\n    ev.status.eqn(reason)\n  );\n});\nassert.isTrue(\n  originalState.eqn(1),\n  \"Original state should be ADOPTABLE\"\n);\nassert.isTrue(\n  actualState.eqn(expectedState),\n  \"Expected state should NONAVAIL\"\n);",
                      "err": {},
                      "uuid": "7e23a44b-38fb-4a9c-9112-efd54f35bd34",
                      "parentUUID": "264dee78-471b-4fa4-af5f-00a5fe9b590a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5913fbf9-ae7b-4997-b066-0389fba73043",
                    "3fd18f2b-0665-48f2-9f5b-70429ed924e1",
                    "7e23a44b-38fb-4a9c-9112-efd54f35bd34"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 170,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [
                "2857416e-c842-4a42-b2a8-fa5fc2f11050"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [
            "1c2c2856-2d06-4a3f-8af6-1dfe5c32e621"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "74d17eb0-6f05-4099-b706-4704fe45feda",
          "title": "Contract: Revert checks for Adoption Contract",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
          "file": "\\test\\contracts\\Adoption.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Revert checks for Adoption Contract\"",
              "fullTitle": "Contract: Revert checks for Adoption Contract \"before all\" hook: prepare suite in \"Contract: Revert checks for Adoption Contract\"",
              "timedOut": false,
              "duration": 127,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "b1561812-0086-4483-a99a-16934fe0096f",
              "parentUUID": "74d17eb0-6f05-4099-b706-4704fe45feda",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Contract: Revert checks for Adoption Contract\"",
              "fullTitle": "Contract: Revert checks for Adoption Contract \"before all\" hook in \"Contract: Revert checks for Adoption Contract\"",
              "timedOut": false,
              "duration": 188,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.new();\nadoption = await Adoption.new(snow.address);\nadoptionFee = await adoption.getAdoptionFee();\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "5f20e4c9-0fba-4aad-8826-730698ec2ba7",
              "parentUUID": "74d17eb0-6f05-4099-b706-4704fe45feda",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Revert checks for Adoption Contract\"",
              "fullTitle": "Contract: Revert checks for Adoption Contract \"before each\" hook: before test in \"Contract: Revert checks for Adoption Contract\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "df09cdbe-a089-4924-a0ac-5a67168fa87b",
              "parentUUID": "74d17eb0-6f05-4099-b706-4704fe45feda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Revert checks for Adoption Contract\"",
              "fullTitle": "Contract: Revert checks for Adoption Contract \"after each\" hook: after test in \"Contract: Revert checks for Adoption Contract\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "3dd0fdb2-5661-4a4e-8d38-57d9c9d18f7f",
              "parentUUID": "74d17eb0-6f05-4099-b706-4704fe45feda",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "81cecb46-9890-4820-987f-32af4d1985f7",
              "title": "Test reverts for add pet method",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on adding pet with invalid new status LOCKED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status LOCKED",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "d3434d41-2d77-48c1-8013-69e8296242c8",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status APPROVED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status APPROVED",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "9040ebff-af41-4a1d-a25c-de25090415c6",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADOPTED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status ADOPTED",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "b86621c1-ea54-4aaf-83d0-70aac5131a78",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REJECTED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status REJECTED",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "7d48dc15-548c-4a18-b926-d510af95278e",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status CANCELLED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status CANCELLED",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "fb09858a-06a5-46ee-b9a9-7be595338c67",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status ADDED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status ADDED",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "c226cc0f-9aa8-4736-94a6-9598fe26df7d",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status REMOVED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status REMOVED",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "9c56e8eb-8e1a-4af2-9388-40334d8e8ff6",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on adding pet with invalid new status EUTHANISED",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Test reverts for add pet method should revert on adding pet with invalid new status EUTHANISED",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await truffleAssert.fails(\n  adoption.addPet(fakeURI, adoptionStateToNum[badStatus]),\n  truffleAssert.ErrorType.REVERT,\n  \"Adoption status must be either adoptable or not available\",\n  `Add pet transaction passes with invalid status ${badStatus}`\n);",
                  "err": {},
                  "uuid": "11947111-c289-460e-8497-a1fa73c36f8a",
                  "parentUUID": "81cecb46-9890-4820-987f-32af4d1985f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3434d41-2d77-48c1-8013-69e8296242c8",
                "9040ebff-af41-4a1d-a25c-de25090415c6",
                "b86621c1-ea54-4aaf-83d0-70aac5131a78",
                "7d48dc15-548c-4a18-b926-d510af95278e",
                "fb09858a-06a5-46ee-b9a9-7be595338c67",
                "c226cc0f-9aa8-4736-94a6-9598fe26df7d",
                "9c56e8eb-8e1a-4af2-9388-40334d8e8ff6",
                "11947111-c289-460e-8497-a1fa73c36f8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 438,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "53345516-6951-439a-bc71-95cb059d7dee",
              "title": "Reverts with pet ID",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
              "file": "\\test\\contracts\\Adoption.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Reverts with pet ID\"",
                  "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID \"before all\" hook in \"Reverts with pet ID\"",
                  "timedOut": false,
                  "duration": 665,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (let i = 0; i < revertPetCount; i++) {\n  await adoption.addPet(fakeURI, i && 1);\n}\nawait snow.approve(adoption.address, adoptionFee * 4, {\n  from: account2,\n});\nfor (let i = 2; i < 5; i++) {\n  await adoption.requestAdoption(i, { from: account2 });\n}\nfor (let i = 3; i < 5; i++) {\n  await adoption.approveAdoption(account2, i, { from: account1 });\n}\nawait adoption.confirmAdoption(4, 0, { from: account2 });",
                  "err": {},
                  "uuid": "6d293679-f17e-4f17-9aee-f025ead88960",
                  "parentUUID": "53345516-6951-439a-bc71-95cb059d7dee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a6a792df-c770-4375-b68b-7116c4c0a846",
                  "title": "Test reverts for request method",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on requesting nonexistent pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert on requesting nonexistent pet ID",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.requestAdoption(revertPetCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "c0d9dee3-9ceb-4b41-adac-6a475befe2db",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a request on a non adoptable pet, pet ID: 0",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert a request on a non adoptable pet, pet ID: 0",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "fd5900ad-9092-4ef3-82ac-ac529e7ce2f8",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a request on a non adoptable pet, pet ID: 1",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert a request on a non adoptable pet, pet ID: 1",
                      "timedOut": false,
                      "duration": 9,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "eda8b308-6f8c-40df-bd00-11a1ba6a0a11",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a request on a non adoptable pet, pet ID: 2",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert a request on a non adoptable pet, pet ID: 2",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "288ae514-ca16-4558-ad69-13791e8b38cf",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a request on a non adoptable pet, pet ID: 3",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert a request on a non adoptable pet, pet ID: 3",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "534c3a30-ff1f-437c-be5e-236fadee7e6f",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a request on a non adoptable pet, pet ID: 4",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for request method should revert a request on a non adoptable pet, pet ID: 4",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"ADOPTABLE\"])) {\n  await truffleAssert.fails(\n    adoption.requestAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not available for adoption\",\n    \"Request adoption incorrectly passed with non adoptable pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "83dd57f3-83db-4152-9a16-fdc1cf66160a",
                      "parentUUID": "a6a792df-c770-4375-b68b-7116c4c0a846",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c0d9dee3-9ceb-4b41-adac-6a475befe2db",
                    "fd5900ad-9092-4ef3-82ac-ac529e7ce2f8",
                    "288ae514-ca16-4558-ad69-13791e8b38cf",
                    "534c3a30-ff1f-437c-be5e-236fadee7e6f",
                    "83dd57f3-83db-4152-9a16-fdc1cf66160a"
                  ],
                  "failures": [],
                  "pending": [
                    "eda8b308-6f8c-40df-bd00-11a1ba6a0a11"
                  ],
                  "skipped": [],
                  "duration": 305,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                },
                {
                  "uuid": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                  "title": "Test reverts for approve and reject methods",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on approving nonexistent pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert on approving nonexistent pet ID",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account2, revertPetCount, {\n    from: account1,\n  }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "869dbc2f-7404-4745-b4fc-b1b8e223302c",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on rejecting nonexistent pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert on rejecting nonexistent pet ID",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account2, revertPetCount, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "92dd5db6-901d-4c7d-850f-1949ffd6b20a",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an approval on a non requested pet, pet ID: 0",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 0",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "5f894f17-3d72-4cb5-aa96-1a8470fb7c7b",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a rejection on a non requested pet, pet ID: 0",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 0",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "1eb1df88-faa0-4030-ad9b-85c5a2cbc291",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an approval on a non requested pet, pet ID: 1",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 1",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "f291f0ec-fd1e-450d-8426-c7b5ace48864",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a rejection on a non requested pet, pet ID: 1",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 1",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "b5cc6ff8-e508-40e6-b8e2-43dd0b119030",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an approval on a non requested pet, pet ID: 2",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 2",
                      "timedOut": false,
                      "duration": 7,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "0364f0f9-061e-40c1-a159-4179b3b5c612",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a rejection on a non requested pet, pet ID: 2",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 2",
                      "timedOut": false,
                      "duration": 6,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "652561f0-3d7f-47b4-b640-b87d2750cb33",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an approval on a non requested pet, pet ID: 3",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 3",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "9c903c80-525e-4ec1-b74c-89d39da685c9",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a rejection on a non requested pet, pet ID: 3",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 3",
                      "timedOut": false,
                      "duration": 84,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "a7f7f20c-168c-4871-811e-5f246f53710e",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an approval on a non requested pet, pet ID: 4",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert an approval on a non requested pet, pet ID: 4",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.approveAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Approve adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "93e9f359-686d-42ab-beb3-baa099ca540d",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a rejection on a non requested pet, pet ID: 4",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert a rejection on a non requested pet, pet ID: 4",
                      "timedOut": false,
                      "duration": 44,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"LOCKED\"])) {\n  await truffleAssert.fails(\n    adoption.rejectAdoption(account2, petID, { from: account1 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not requested for adoption yet!\",\n    \"Reject adoption incorrectly passed with non requested pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "d2af2710-221c-48cd-a1c0-d6d2e4a1b671",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on approving unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert on approving unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.approveAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "cc06a06c-3d94-4793-ace7-c6539db7007a",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on rejecting unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for approve and reject methods should revert on rejecting unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.rejectAdoption(account3, lockedPet, { from: account1 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "74632737-481f-42f5-b912-e6716ea7cfe5",
                      "parentUUID": "431bc421-5563-41f6-8cc2-1a2df6a1c5a1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "869dbc2f-7404-4745-b4fc-b1b8e223302c",
                    "92dd5db6-901d-4c7d-850f-1949ffd6b20a",
                    "5f894f17-3d72-4cb5-aa96-1a8470fb7c7b",
                    "1eb1df88-faa0-4030-ad9b-85c5a2cbc291",
                    "f291f0ec-fd1e-450d-8426-c7b5ace48864",
                    "b5cc6ff8-e508-40e6-b8e2-43dd0b119030",
                    "9c903c80-525e-4ec1-b74c-89d39da685c9",
                    "a7f7f20c-168c-4871-811e-5f246f53710e",
                    "93e9f359-686d-42ab-beb3-baa099ca540d",
                    "d2af2710-221c-48cd-a1c0-d6d2e4a1b671",
                    "cc06a06c-3d94-4793-ace7-c6539db7007a",
                    "74632737-481f-42f5-b912-e6716ea7cfe5"
                  ],
                  "failures": [],
                  "pending": [
                    "0364f0f9-061e-40c1-a159-4179b3b5c612",
                    "652561f0-3d7f-47b4-b640-b87d2750cb33"
                  ],
                  "skipped": [],
                  "duration": 696,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                },
                {
                  "uuid": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                  "title": "Test reverts for confirm and cancel methods",
                  "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Adoption.test.js",
                  "file": "\\test\\contracts\\Adoption.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on confirming nonexistent pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming nonexistent pet ID",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(revertPetCount, 0, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "e50a9f0d-cd5d-448e-9ffe-4fd6e1f0d4e6",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling nonexistent pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling nonexistent pet ID",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(revertPetCount, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"ERC721: Query for nonexistent pet\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "49d39b78-c7e8-4154-8abf-0b62375f63c5",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a confirmation on a non approved pet, pet ID: 0",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 0",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "81450b62-4fad-42a7-bbaf-fb3334512ce3",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an cancellation on a non approved pet, pet ID: 0",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 0",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "2af35980-b54d-43b3-8ee5-50a5820ac012",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on confirming unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "6083983c-7c16-4682-9d2d-425bc48dbcf9",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 51,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "aba6035b-8d28-41a7-8086-90b410fbd021",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a confirmation on a non approved pet, pet ID: 1",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 1",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "206c41c7-e89e-4eb8-a0d8-084f32f67669",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an cancellation on a non approved pet, pet ID: 1",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 1",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "7f73ea35-4d80-4c0d-912f-9f1a50e01f3d",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on confirming unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "41f61782-8f25-4076-886c-090001702e1c",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "e1cba199-05db-4739-b9ff-c65c07c4cfda",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a confirmation on a non approved pet, pet ID: 2",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 2",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "63177642-df27-4ff3-9ea0-85fb1785707e",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an cancellation on a non approved pet, pet ID: 2",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 2",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "bddaf832-ac9c-4655-8b9f-c3193070e975",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on confirming unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "7a2455d3-b6db-4092-be1e-521083e03ddb",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "6e24c4ab-0f09-446f-ab1f-f2090aafdeb8",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a confirmation on a non approved pet, pet ID: 3",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 3",
                      "timedOut": false,
                      "duration": 7,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "fe41f471-e4e2-45d3-83f2-583ba32ebfb6",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an cancellation on a non approved pet, pet ID: 3",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 3",
                      "timedOut": false,
                      "duration": 5,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "a7694fc4-6981-437b-8773-20a1b1c207b9",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on confirming unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "a96b2f84-d928-4164-9981-7f09b9b57f9b",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "617e5530-6e3f-4869-8da2-8a926ea2564e",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert a confirmation on a non approved pet, pet ID: 4",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert a confirmation on a non approved pet, pet ID: 4",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.confirmAdoption(petID, 0, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Confirm adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "78812d57-20d7-44fe-a52b-0acee426d021",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert an cancellation on a non approved pet, pet ID: 4",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert an cancellation on a non approved pet, pet ID: 4",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const adoptionStatus = await adoption.getAdoptionState(petID);\nif (!adoptionStatus.eqn(adoptionStateToNum[\"APPROVED\"])) {\n  await truffleAssert.fails(\n    adoption.cancelAdoption(petID, { from: account2 }),\n    truffleAssert.ErrorType.REVERT,\n    \"Not approved for adoption!\",\n    \"Cancel adoption incorrectly passed with non approved pet\"\n  );\n} else {\n  this.skip();\n}",
                      "err": {},
                      "uuid": "9f856a16-9d7c-4c74-9e80-ba81539120ff",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on confirming unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on confirming unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.confirmAdoption(approvedPet, 0, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "ebf6760e-e79b-4af6-8be2-0622fc2a908a",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert on cancelling unmatched adopter and pet ID",
                      "fullTitle": "Contract: Revert checks for Adoption Contract Reverts with pet ID Test reverts for confirm and cancel methods should revert on cancelling unmatched adopter and pet ID",
                      "timedOut": false,
                      "duration": 100,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await truffleAssert.fails(\n  adoption.cancelAdoption(approvedPet, { from: account3 }),\n  truffleAssert.ErrorType.REVERT,\n  \"Pet does not match adopter!\",\n  \"Request adoption incorrectly passed with nonexistent pet\"\n);",
                      "err": {},
                      "uuid": "ad9f60de-08d8-4612-88f7-5601484a882e",
                      "parentUUID": "5c75c7d9-1ab4-446c-a204-27328ab9a7f8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e50a9f0d-cd5d-448e-9ffe-4fd6e1f0d4e6",
                    "49d39b78-c7e8-4154-8abf-0b62375f63c5",
                    "81450b62-4fad-42a7-bbaf-fb3334512ce3",
                    "2af35980-b54d-43b3-8ee5-50a5820ac012",
                    "6083983c-7c16-4682-9d2d-425bc48dbcf9",
                    "aba6035b-8d28-41a7-8086-90b410fbd021",
                    "206c41c7-e89e-4eb8-a0d8-084f32f67669",
                    "7f73ea35-4d80-4c0d-912f-9f1a50e01f3d",
                    "41f61782-8f25-4076-886c-090001702e1c",
                    "e1cba199-05db-4739-b9ff-c65c07c4cfda",
                    "63177642-df27-4ff3-9ea0-85fb1785707e",
                    "bddaf832-ac9c-4655-8b9f-c3193070e975",
                    "7a2455d3-b6db-4092-be1e-521083e03ddb",
                    "6e24c4ab-0f09-446f-ab1f-f2090aafdeb8",
                    "a96b2f84-d928-4164-9981-7f09b9b57f9b",
                    "617e5530-6e3f-4869-8da2-8a926ea2564e",
                    "78812d57-20d7-44fe-a52b-0acee426d021",
                    "9f856a16-9d7c-4c74-9e80-ba81539120ff",
                    "ebf6760e-e79b-4af6-8be2-0622fc2a908a",
                    "ad9f60de-08d8-4612-88f7-5601484a882e"
                  ],
                  "failures": [],
                  "pending": [
                    "fe41f471-e4e2-45d3-83f2-583ba32ebfb6",
                    "a7694fc4-6981-437b-8773-20a1b1c207b9"
                  ],
                  "skipped": [],
                  "duration": 1413,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "4be9a5f8-4a44-4ba6-818a-1d9a42ec85eb",
          "title": "Contract: Donation Contract Unit Test and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
          "file": "\\test\\contracts\\Donation.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before all\" hook: prepare suite in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 120,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "98b3ba60-13e4-402c-ba99-9555545a18bf",
              "parentUUID": "4be9a5f8-4a44-4ba6-818a-1d9a42ec85eb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before each\" hook: before test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "e8e0d406-120c-41f3-b242-3e59e3d6c13d",
              "parentUUID": "4be9a5f8-4a44-4ba6-818a-1d9a42ec85eb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"before each\" hook in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 130,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.new();\ndonation = await Donation.new(snow.address);\nconst acc2Bal = await snow.balanceOf(account2);\n// Initialise account 2 with some funds.\nconst initialFund = (1e6).toString();\nif (acc2Bal.lten(0))\n  await snow.transfer(account2, SNOWdenomination(initialFund), {\n    from: account1,\n  });",
              "err": {},
              "uuid": "774dc391-09ed-4c4d-8c24-c875328574bc",
              "parentUUID": "4be9a5f8-4a44-4ba6-818a-1d9a42ec85eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: Donation Contract Unit Test and Integration Test \"after each\" hook: after test in \"Contract: Donation Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "2b7fb5fa-d748-492a-9989-c7451fb2e205",
              "parentUUID": "4be9a5f8-4a44-4ba6-818a-1d9a42ec85eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "48393b51-1c4b-4eb0-a963-979a75e7794f",
              "title": "Testing normal donation operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
              "file": "\\test\\contracts\\Donation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should donate correct amount of SNOW with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Testing normal donation operations should donate correct amount of SNOW with correct message to the owner",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst expectedTokenType = tokenTypeToNum[\"SNOW\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = SNOWdenomination(50000);\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nawait snow.approve(donation.address, donateAmount, { from: account2 });\nconst result = await donation.donateSNOW(donateAmount, donateMessage, {\n  from: account2,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "8b319937-332b-4332-9d7c-314635989359",
                  "parentUUID": "48393b51-1c4b-4eb0-a963-979a75e7794f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should donate correct amount of ETH with correct message to the owner",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Testing normal donation operations should donate correct amount of ETH with correct message to the owner",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = BN(await web3.eth.getBalance(account1));\nconst account2StartingBalance = BN(await web3.eth.getBalance(account2));\nconst expectedTokenType = tokenTypeToNum[\"ETH\"];\nconst startingTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst startingPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst donateAmount = BN(Web3.utils.toWei(\"0.05\", \"ether\"));\nconst donateMessage = \"Good luck for your work\";\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.add(donateAmount);\nvar expectedAccount2FinalBalance =\n  account2StartingBalance.sub(donateAmount);\nconst expectedTotalDonation = startingTotalDonation.add(donateAmount);\nconst expectedPersonalDonation =\n  startingPersonalDonation.add(donateAmount);\nconst result = await donation.donateETH(donateMessage, {\n  from: account2,\n  value: donateAmount,\n});\nconst actualAccount1FinalBalance = BN(\n  await web3.eth.getBalance(account1)\n);\nconst actualAccount2FinalBalance = BN(\n  await web3.eth.getBalance(account2)\n);\nconst actualPersonalDonation = await donation.getDonationOfDonor(\n  account2,\n  expectedTokenType\n);\nconst actualTotalDonation = await donation.getTotalDonation(\n  expectedTokenType\n);\nconst gasPrice = BN(result.receipt.effectiveGasPrice);\nconst gasUsed = BN(result.receipt.gasUsed);\nconst gasCost = gasPrice.mul(gasUsed);\nexpectedAccount2FinalBalance.isub(gasCost);\ntruffleAssert.eventEmitted(result, \"Donate\", (ev) => {\n  return (\n    ev.donor === account2 &&\n    ev.tokenType.eqn(expectedTokenType) &&\n    ev.amount.eq(donateAmount) &&\n    ev.message === donateMessage\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Actual final balance of account 1 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Actual final balance of account 2 is not equal to the expected value after donation\"\n);\nassert.isTrue(\n  expectedTotalDonation.eq(actualTotalDonation),\n  \"Total donation is not equal to starting donation adds the donated amount\"\n);\nassert.isTrue(\n  expectedPersonalDonation.eq(actualPersonalDonation),\n  \"Personal donation is not equal to the starting personal donation adds the donated amount\"\n);",
                  "err": {},
                  "uuid": "b1c35b60-60bd-4690-a350-797656835392",
                  "parentUUID": "48393b51-1c4b-4eb0-a963-979a75e7794f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b319937-332b-4332-9d7c-314635989359",
                "b1c35b60-60bd-4690-a350-797656835392"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 207,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "3aba176b-fc4c-4c63-a157-3e820fe4017a",
              "title": "Revert Checks for Donation Contract",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\Donation.test.js",
              "file": "\\test\\contracts\\Donation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on 0 amount donation",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Revert Checks for Donation Contract should revert on 0 amount donation",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message = \"Good luck\";\nawait truffleAssert.fails(\n  donation.donateETH(message, { from: account2, value: \"0\" }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"ETH donation incorrectly passed with amount 0\"\n);\nawait truffleAssert.fails(\n  donation.donateSNOW(\"0\", message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"cannot be zero\",\n  \"SNOW donation incorrectly passed with amount 0\"\n);",
                  "err": {},
                  "uuid": "da4c4862-f806-406a-bb0b-c878dbfa4f99",
                  "parentUUID": "3aba176b-fc4c-4c63-a157-3e820fe4017a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on insufficient allowance",
                  "fullTitle": "Contract: Donation Contract Unit Test and Integration Test Revert Checks for Donation Contract should revert on insufficient allowance",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message = \"Good luck\";\nconst donateAmount = SNOWdenomination(50000);\nawait snow.approve(donation.address, donateAmount.subn(1));\nawait truffleAssert.fails(\n  donation.donateSNOW(donateAmount, message, { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"insufficient allowance\",\n  \"SNOW donation incorrectly passed with insufficient allowance\"\n);",
                  "err": {},
                  "uuid": "ab8002a9-2ca9-4621-b618-c4dd9972ba57",
                  "parentUUID": "3aba176b-fc4c-4c63-a157-3e820fe4017a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da4c4862-f806-406a-bb0b-c878dbfa4f99",
                "ab8002a9-2ca9-4621-b618-c4dd9972ba57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "c83d6030-1ba8-4964-bc96-de657d086291",
          "title": "Contract: ShelterNOW Contract Unit Test and Integration Test",
          "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
          "file": "\\test\\contracts\\ShelterNOW.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before all\" hook: prepare suite in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 103,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(runner.BEFORE_TIMEOUT);\nawait runner.initialize();",
              "err": {},
              "uuid": "22ee2a02-5617-499d-a447-216dc7bb8bd3",
              "parentUUID": "c83d6030-1ba8-4964-bc96-de657d086291",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before each\" hook: before test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.startTest();",
              "err": {},
              "uuid": "b404a488-de13-41af-b669-96abd5204978",
              "parentUUID": "c83d6030-1ba8-4964-bc96-de657d086291",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"before each\" hook in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 69,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "snow = await ShelterNOW.new();",
              "err": {},
              "uuid": "e2b9118a-3753-48b2-8657-fcc4e69bde16",
              "parentUUID": "c83d6030-1ba8-4964-bc96-de657d086291",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test \"after each\" hook: after test in \"Contract: ShelterNOW Contract Unit Test and Integration Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await runner.endTest(this);",
              "err": {},
              "uuid": "dee7b677-66b7-4af5-b374-518355f8bcb1",
              "parentUUID": "c83d6030-1ba8-4964-bc96-de657d086291",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "830196ff-5612-4729-8609-070429fa50d8",
              "title": "Testing normal ShelterNOW operations",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
              "file": "\\test\\contracts\\ShelterNOW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer token and receive token correctly",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should transfer token and receive token correctly",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account1StartingBalance = await snow.balanceOf(account1);\nconst account2StartingBalance = await snow.balanceOf(account2);\nconst transferAmount = SNOWdenomination(100);\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.sub(transferAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.add(transferAmount);\nconst result = await snow.transfer(account2, transferAmount, {\n  from: account1,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(account1);\nconst actualAccount2FinalBalance = await snow.balanceOf(account2);\ntruffleAssert.eventEmitted(result, \"Transfer\", (ev) => {\n  return (\n    ev.from == account1 &&\n    ev.to == account2 &&\n    ev.value.eq(transferAmount)\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Balance of account 1 is incorrect after transfer\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Balance of account 2 is incorrect after transfer\"\n);",
                  "err": {},
                  "uuid": "e8fa5b6e-4143-4302-978d-2da59ed1cd23",
                  "parentUUID": "830196ff-5612-4729-8609-070429fa50d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly approve spending allowance to another account",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should correctly approve spending allowance to another account",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const owner = account1;\nconst spender = account2;\nconst startingAllowance = await snow.allowance(owner, spender);\nconst givenAllowance = SNOWdenomination(200);\nconst expectedAllowance = SNOWdenomination(200);\nconst result = await snow.approve(spender, givenAllowance, {\n  from: owner,\n});\nconst actualAllowance = await snow.allowance(owner, spender);\ntruffleAssert.eventEmitted(result, \"Approval\", (ev) => {\n  return (\n    ev.owner == owner &&\n    ev.spender == spender &&\n    ev.value.eq(expectedAllowance)\n  );\n});\nassert.isTrue(\n  startingAllowance.eqn(0),\n  \"Starting allowance should be equal to 0\"\n);\nassert.isTrue(\n  expectedAllowance.eq(actualAllowance),\n  \"Expected allowance is not equal to the actual allowance\"\n);",
                  "err": {},
                  "uuid": "a43db10b-fada-4ef0-93f3-8c7101c33af8",
                  "parentUUID": "830196ff-5612-4729-8609-070429fa50d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should transfer token and receive token correctly by approved spender",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Testing normal ShelterNOW operations should transfer token and receive token correctly by approved spender",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const owner = account1;\nconst spender = account2;\nconst account1StartingBalance = await snow.balanceOf(owner);\nconst account2StartingBalance = await snow.balanceOf(spender);\nconst transferAmount = SNOWdenomination(200);\nconst expectedAccount1FinalBalance =\n  account1StartingBalance.sub(transferAmount);\nconst expectedAccount2FinalBalance =\n  account2StartingBalance.add(transferAmount);\nawait snow.approve(spender, transferAmount, { from: owner });\nconst approvedAllowance = await snow.allowance(owner, spender);\nconst expectedFinalAllowance = approvedAllowance.sub(transferAmount);\nconst result = await snow.transferFrom(owner, spender, transferAmount, {\n  from: spender,\n});\nconst actualAccount1FinalBalance = await snow.balanceOf(owner);\nconst actualAccount2FinalBalance = await snow.balanceOf(spender);\nconst actualFinalAllowance = await snow.allowance(owner, spender);\ntruffleAssert.eventEmitted(result, \"Transfer\", (ev) => {\n  return (\n    ev.from == account1 &&\n    ev.to == account2 &&\n    ev.value.eq(transferAmount)\n  );\n});\nassert.isTrue(\n  expectedAccount1FinalBalance.eq(actualAccount1FinalBalance),\n  \"Balance of account 1 is incorrect after transfer\"\n);\nassert.isTrue(\n  expectedAccount2FinalBalance.eq(actualAccount2FinalBalance),\n  \"Balance of account 2 is incorrect after transfer\"\n);\nassert.isTrue(\n  approvedAllowance.eq(transferAmount),\n  \"Allowance is not increased after approval\"\n);\nassert.isTrue(\n  actualFinalAllowance.eq(expectedFinalAllowance),\n  \"Final allowance is not spent by the transfer amount\"\n);",
                  "err": {},
                  "uuid": "1fe5b36e-3729-4f86-9f42-6d6a2122a9e1",
                  "parentUUID": "830196ff-5612-4729-8609-070429fa50d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8fa5b6e-4143-4302-978d-2da59ed1cd23",
                "a43db10b-fada-4ef0-93f3-8c7101c33af8",
                "1fe5b36e-3729-4f86-9f42-6d6a2122a9e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 291,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "c4615ffc-9eb4-41d4-be3a-211a9c0c29af",
              "title": "Revert checks for ShelterNOW Contract",
              "fullFile": "E:\\Users\\user\\Documents\\Homework\\Year 3 Comp\\CSC3632\\animal-shelters-dapp\\test\\contracts\\ShelterNOW.test.js",
              "file": "\\test\\contracts\\ShelterNOW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert on insufficient balance",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Revert checks for ShelterNOW Contract should revert on insufficient balance",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const account2Balance = await snow.balanceOf(account2);\ntruffleAssert.fails(\n  snow.transfer(account1, account2Balance.addn(1), { from: account2 }),\n  truffleAssert.ErrorType.REVERT,\n  \"transfer amount exceeds balance\",\n  \"ShelterNOW transfer incorrectly passes with insufficient balance\"\n);",
                  "err": {},
                  "uuid": "3d2615de-5795-4526-9ff0-16aa6aff5acb",
                  "parentUUID": "c4615ffc-9eb4-41d4-be3a-211a9c0c29af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert on insufficient allowance",
                  "fullTitle": "Contract: ShelterNOW Contract Unit Test and Integration Test Revert checks for ShelterNOW Contract should revert on insufficient allowance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferAmount = \"15000000000000\";\ntruffleAssert.fails(\n  snow.transferFrom(account1, account2, transferAmount, {\n    from: account2,\n  }),\n  truffleAssert.ErrorType.REVERT,\n  \"insufficient allowance\",\n  \"ShelterNOW transfer incorrectly passes with insufficient allowance\"\n);",
                  "err": {},
                  "uuid": "efb8412f-1989-4db5-9b1c-90a8fa0ad6b5",
                  "parentUUID": "c4615ffc-9eb4-41d4-be3a-211a9c0c29af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d2615de-5795-4526-9ff0-16aa6aff5acb",
                "efb8412f-1989-4db5-9b1c-90a8fa0ad6b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": false,
      "version": "6.2.0"
    }
  }
}